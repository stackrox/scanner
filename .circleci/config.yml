version: 2.1

defaultImage: &defaultImage
  image: docker.io/stackrox/apollo-ci:snapshot-0.2.6-1-g4b05e5621b
  auth:
    username: $DOCKER_IO_PULL_USERNAME
    password: $DOCKER_IO_PULL_PASSWORD

defaultWorkingDirectory: &defaultWorkingDirectory '/go/src/github.com/stackrox/scanner'

defaults: &defaults
  docker:
    - *defaultImage
  working_directory: *defaultWorkingDirectory

commands:
  setup-gcp:
    description: Set up GCP service account and configure gcloud
    steps:
      - run:
          name: Configure GCP service account and gcloud
          command: |
            cci-export GOOGLE_APPLICATION_CREDENTIALS /tmp/gcp.json
            echo "${GOOGLE_SA_CIRCLECI_SCANNER}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
            chmod 0600 "${GOOGLE_APPLICATION_CREDENTIALS}"
            gcloud auth activate-service-account --key-file "${GOOGLE_APPLICATION_CREDENTIALS}"
            gcloud auth list
            gcloud auth configure-docker
            gcloud config set project stackrox-ci
            gcloud config set core/disable_prompts True

jobs:
  unit-tests:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: make deps

      - run:
          name: Run unit tests
          command: make unit-tests

  style-checks:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: make deps

      - run:
          name: Run style checks
          command: make style

      - run:
          name: Run style checks on test code
          command: make -C qa-tests style

  produce-vuln-definitions-dump:
    docker:
      - *defaultImage
      - image: postgres:12.0-alpine
    working_directory: *defaultWorkingDirectory

    steps:
    - checkout
    - setup_remote_docker

    - run:
        name: Build updater
        command: |
          make build-updater

    - run:
        name: Make temp directory for vuln dump
        command: |
          cci-export VULN_DUMP_DIR /tmp/vuln-dump
          mkdir -p "${VULN_DUMP_DIR}"

    - run:
        name: Generate dump
        command: |
          ./bin/updater generate-dump --out-file "${VULN_DUMP_DIR}/dump.tar.gz"
          [[ -f "${VULN_DUMP_DIR}/dump.tar.gz" ]]

    - run:
        name: Upload dump to postgres
        command: |
          ./bin/updater load-dump --postgres-host localhost --postgres-port 5432 --dump-file "${VULN_DUMP_DIR}/dump.tar.gz"

    - run:
        name: Save dump
        command: |
          pg_dump -U postgres postgres://127.0.0.1:5432 > "${VULN_DUMP_DIR}/definitions.sql"
          gzip --best "${VULN_DUMP_DIR}/definitions.sql"
          [[ -f "${VULN_DUMP_DIR}/definitions.sql.gz" ]]

    - persist_to_workspace:
        root: /tmp/vuln-dump
        paths:
        - definitions.sql.gz
        - dump.tar.gz

    - run:
        name: Print postgres logs
        command: docker logs postgres-dump
        when: always

    - run:
        name: Remove postgres container
        command: docker stop postgres-dump && docker rm postgres-dump


  build:
    <<: *defaults
    steps:
    - checkout
    - setup_remote_docker

    - attach_workspace:
        at: /tmp/vuln-dump

    - run:
        name: Move vuln dump to expected directory
        command: mv /tmp/vuln-dump/definitions.sql.gz image/dump

    - run:
        name: Build images
        command: make image

    - setup-gcp

    - run:
        name: Push images
        command: |
          TAG="$(./get-tag)"
          docker push "us.gcr.io/stackrox-ci/scanner:${TAG}"
          docker push "us.gcr.io/stackrox-ci/scanner-db:${TAG}"

          docker login -u "$DOCKER_IO_PUSH_USERNAME" -p "$DOCKER_IO_PUSH_PASSWORD" docker.io
          docker tag "us.gcr.io/stackrox-ci/scanner:${TAG}" "stackrox/scanner:${TAG}"
          docker push "stackrox/scanner:${TAG}"

          docker tag "us.gcr.io/stackrox-ci/scanner-db:${TAG}" "stackrox/scanner-db:${TAG}"
          docker push "stackrox/scanner-db:${TAG}"

  provision-cluster:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - setup-gcp

      - run:
          name: Create GKE Cluster
          command: |
            cci-export CLUSTER_NAME "stackrox-scanner-ci-${CIRCLE_BUILD_NUM}"
            source .circleci/create-cluster.sh && create-cluster

      - run:
          name: Save cluster config
          command: |
            CONFIG_DIR=/tmp/saved_config
            mkdir -p "${CONFIG_DIR}"
            echo "${CLUSTER_NAME}" > "${CONFIG_DIR}/name"
            gcloud config get-value compute/zone > "${CONFIG_DIR}/zone"

      - run:
          name: Tear down cluster upon failure
          command: |
            gcloud container clusters delete "$CLUSTER_NAME" --async
          when: on_fail

      - persist_to_workspace:
          root: /tmp
          paths:
            - saved_config

  e2e-tests:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - setup-gcp

      - attach_workspace:
          at: /tmp

      - run:
          name: Restore cluster config
          command: |
            CONFIG_DIR=/tmp/saved_config
            cci-export CLUSTER_NAME "$(cat "${CONFIG_DIR}/name")"
            [[ -n "${CLUSTER_NAME}" ]]
            cci-export ZONE "$(cat "${CONFIG_DIR}/zone")"
            [[ -n "${ZONE}" ]]
            gcloud config set compute/zone "${ZONE}"
            cmd=(gcloud container clusters get-credentials --project stackrox-ci --zone "$ZONE" "$CLUSTER_NAME")
            "${cmd[@]}"
            echo "Restored config for cluster ${CLUSTER_NAME}"
            echo
            echo "Run the following command to attach to the cluster:"
            echo
            printf " %q" "${cmd[@]}"
            echo

      - run:
          name: Wait for cluster to stabilize
          command: |
            source .circleci/create-cluster.sh && wait-for-cluster

      - run:
          name: Deploy into the cluster
          command: make deploy

      - run:
          name: Wait for the pod to be running, and port-forward
          command: |
            sleep 5
            kubectl -n stackrox get pod
            POD="$(kubectl -n stackrox get pod -o jsonpath='{.items[?(@.metadata.labels.app=="scanner")].metadata.name}')"
            [[ -n "${POD}" ]]
            kubectl -n stackrox wait --for=condition=ready "pod/${POD}" --timeout=3m
            kubectl -n stackrox get pod

            success=0
            for i in $(seq 1 10); do
              nohup kubectl port-forward -n stackrox "${POD}" "8080:8080" & # Legacy clairify endpoint
              nohup kubectl port-forward -n stackrox "${POD}" "8443:8443" & # gRPC endpoint
              curl --retry 12 --retry-connrefused -4 --retry-delay 5 --retry-max-time 60 -skf 'https://localhost:8080/clairify/ping' || touch FAIL
              curl --retry 12 --retry-connrefused -4 --retry-delay 5 --retry-max-time 60 -skf 'https://localhost:8443/v1/ping' || touch FAIL
              if [[ ! -f FAIL ]]; then
                success=1
                break
              fi
              echo "Port-forwarding failed."
              cat nohup.out || true
              rm nohup.out || true
              rm FAIL || true
              pkill kubectl || true
              sleep 5
            done

            [[ "${success}" -gt 0 ]]

      - run:
          name: Run sanity tests
          command: |
            export SCANNER_ENDPOINT=https://localhost:8080
            make e2e-tests

      - run:
          name: Collect k8s logs
          command: |
            .circleci/collect-service-logs.sh stackrox
            .circleci/collect-service-logs.sh kube-system
          when: always

      - store_artifacts:
          path: /tmp/k8s-service-logs
          destination: k8s-service-logs

      - run:
          name: Verify the scanner did not restart
          command: |
            if [[ "$(ls /tmp/k8s-service-logs/stackrox/*-previous.log | wc -l)" != 0 ]]; then
                ls /tmp/k8s-service-logs/stackrox/*-previous.log
                exit 1
            fi
            cat nohup.out || true
          when: always

      - run:
          name: Tear down cluster
          command: |
            gcloud container clusters delete "$CLUSTER_NAME" --async
          when: always

workflows:
  version: 2

  build:
    jobs:
    - unit-tests:
        context: docker-io-pull
        filters:
          tags:
            only: /.*/
    - style-checks:
        context: docker-io-pull
        filters:
          tags:
            only: /.*/
    - produce-vuln-definitions-dump:
        context: docker-io-pull
        filters:
          tags:
            only: /.*/
    - build:
        context: docker-io-and-stackrox-io-push
        requires:
          - produce-vuln-definitions-dump
        filters:
          tags:
            only: /.*/
    - provision-cluster:
        context: docker-io-pull
        filters:
          tags:
            only: /.*/
    - e2e-tests:
        context: docker-io-pull
        requires:
          - build
          - provision-cluster
        filters:
          tags:
            only: /.*/
