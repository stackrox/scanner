// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shared/api/v1/node_scan_service.proto

package scannerV1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetNodeVulnerabilitiesRequest struct {
	OsImage              string                                          `protobuf:"bytes,1,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty"`
	KernelVersion        string                                          `protobuf:"bytes,2,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	KubeletVersion       string                                          `protobuf:"bytes,3,opt,name=kubelet_version,json=kubeletVersion,proto3" json:"kubelet_version,omitempty"`
	KubeproxyVersion     string                                          `protobuf:"bytes,4,opt,name=kubeproxy_version,json=kubeproxyVersion,proto3" json:"kubeproxy_version,omitempty"`
	Runtime              *GetNodeVulnerabilitiesRequest_ContainerRuntime `protobuf:"bytes,5,opt,name=runtime,proto3" json:"runtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *GetNodeVulnerabilitiesRequest) Reset()         { *m = GetNodeVulnerabilitiesRequest{} }
func (m *GetNodeVulnerabilitiesRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeVulnerabilitiesRequest) ProtoMessage()    {}
func (*GetNodeVulnerabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6351ae69dfd0e3d, []int{0}
}
func (m *GetNodeVulnerabilitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeVulnerabilitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeVulnerabilitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeVulnerabilitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeVulnerabilitiesRequest.Merge(m, src)
}
func (m *GetNodeVulnerabilitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeVulnerabilitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeVulnerabilitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeVulnerabilitiesRequest proto.InternalMessageInfo

func (m *GetNodeVulnerabilitiesRequest) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *GetNodeVulnerabilitiesRequest) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *GetNodeVulnerabilitiesRequest) GetKubeletVersion() string {
	if m != nil {
		return m.KubeletVersion
	}
	return ""
}

func (m *GetNodeVulnerabilitiesRequest) GetKubeproxyVersion() string {
	if m != nil {
		return m.KubeproxyVersion
	}
	return ""
}

func (m *GetNodeVulnerabilitiesRequest) GetRuntime() *GetNodeVulnerabilitiesRequest_ContainerRuntime {
	if m != nil {
		return m.Runtime
	}
	return nil
}

func (m *GetNodeVulnerabilitiesRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNodeVulnerabilitiesRequest) Clone() *GetNodeVulnerabilitiesRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetNodeVulnerabilitiesRequest)
	*cloned = *m

	cloned.Runtime = m.Runtime.Clone()
	return cloned
}

type GetNodeVulnerabilitiesRequest_ContainerRuntime struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) Reset() {
	*m = GetNodeVulnerabilitiesRequest_ContainerRuntime{}
}
func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) String() string {
	return proto.CompactTextString(m)
}
func (*GetNodeVulnerabilitiesRequest_ContainerRuntime) ProtoMessage() {}
func (*GetNodeVulnerabilitiesRequest_ContainerRuntime) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6351ae69dfd0e3d, []int{0, 0}
}
func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeVulnerabilitiesRequest_ContainerRuntime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeVulnerabilitiesRequest_ContainerRuntime.Merge(m, src)
}
func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeVulnerabilitiesRequest_ContainerRuntime.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeVulnerabilitiesRequest_ContainerRuntime proto.InternalMessageInfo

func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) Clone() *GetNodeVulnerabilitiesRequest_ContainerRuntime {
	if m == nil {
		return nil
	}
	cloned := new(GetNodeVulnerabilitiesRequest_ContainerRuntime)
	*cloned = *m

	return cloned
}

type GetNodeVulnerabilitiesResponse struct {
	KernelVulnerabilities    []*Vulnerability `protobuf:"bytes,1,rep,name=kernel_vulnerabilities,json=kernelVulnerabilities,proto3" json:"kernel_vulnerabilities,omitempty"`
	KubeletVulnerabilities   []*Vulnerability `protobuf:"bytes,2,rep,name=kubelet_vulnerabilities,json=kubeletVulnerabilities,proto3" json:"kubelet_vulnerabilities,omitempty"`
	KubeproxyVulnerabilities []*Vulnerability `protobuf:"bytes,3,rep,name=kubeproxy_vulnerabilities,json=kubeproxyVulnerabilities,proto3" json:"kubeproxy_vulnerabilities,omitempty"`
	RuntimeVulnerabilities   []*Vulnerability `protobuf:"bytes,4,rep,name=runtime_vulnerabilities,json=runtimeVulnerabilities,proto3" json:"runtime_vulnerabilities,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}         `json:"-"`
	XXX_unrecognized         []byte           `json:"-"`
	XXX_sizecache            int32            `json:"-"`
}

func (m *GetNodeVulnerabilitiesResponse) Reset()         { *m = GetNodeVulnerabilitiesResponse{} }
func (m *GetNodeVulnerabilitiesResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeVulnerabilitiesResponse) ProtoMessage()    {}
func (*GetNodeVulnerabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6351ae69dfd0e3d, []int{1}
}
func (m *GetNodeVulnerabilitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeVulnerabilitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeVulnerabilitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeVulnerabilitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeVulnerabilitiesResponse.Merge(m, src)
}
func (m *GetNodeVulnerabilitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeVulnerabilitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeVulnerabilitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeVulnerabilitiesResponse proto.InternalMessageInfo

func (m *GetNodeVulnerabilitiesResponse) GetKernelVulnerabilities() []*Vulnerability {
	if m != nil {
		return m.KernelVulnerabilities
	}
	return nil
}

func (m *GetNodeVulnerabilitiesResponse) GetKubeletVulnerabilities() []*Vulnerability {
	if m != nil {
		return m.KubeletVulnerabilities
	}
	return nil
}

func (m *GetNodeVulnerabilitiesResponse) GetKubeproxyVulnerabilities() []*Vulnerability {
	if m != nil {
		return m.KubeproxyVulnerabilities
	}
	return nil
}

func (m *GetNodeVulnerabilitiesResponse) GetRuntimeVulnerabilities() []*Vulnerability {
	if m != nil {
		return m.RuntimeVulnerabilities
	}
	return nil
}

func (m *GetNodeVulnerabilitiesResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNodeVulnerabilitiesResponse) Clone() *GetNodeVulnerabilitiesResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetNodeVulnerabilitiesResponse)
	*cloned = *m

	if m.KernelVulnerabilities != nil {
		cloned.KernelVulnerabilities = make([]*Vulnerability, len(m.KernelVulnerabilities))
		for idx, v := range m.KernelVulnerabilities {
			cloned.KernelVulnerabilities[idx] = v.Clone()
		}
	}
	if m.KubeletVulnerabilities != nil {
		cloned.KubeletVulnerabilities = make([]*Vulnerability, len(m.KubeletVulnerabilities))
		for idx, v := range m.KubeletVulnerabilities {
			cloned.KubeletVulnerabilities[idx] = v.Clone()
		}
	}
	if m.KubeproxyVulnerabilities != nil {
		cloned.KubeproxyVulnerabilities = make([]*Vulnerability, len(m.KubeproxyVulnerabilities))
		for idx, v := range m.KubeproxyVulnerabilities {
			cloned.KubeproxyVulnerabilities[idx] = v.Clone()
		}
	}
	if m.RuntimeVulnerabilities != nil {
		cloned.RuntimeVulnerabilities = make([]*Vulnerability, len(m.RuntimeVulnerabilities))
		for idx, v := range m.RuntimeVulnerabilities {
			cloned.RuntimeVulnerabilities[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterType((*GetNodeVulnerabilitiesRequest)(nil), "scannerV1.GetNodeVulnerabilitiesRequest")
	proto.RegisterType((*GetNodeVulnerabilitiesRequest_ContainerRuntime)(nil), "scannerV1.GetNodeVulnerabilitiesRequest.ContainerRuntime")
	proto.RegisterType((*GetNodeVulnerabilitiesResponse)(nil), "scannerV1.GetNodeVulnerabilitiesResponse")
}

func init() {
	proto.RegisterFile("shared/api/v1/node_scan_service.proto", fileDescriptor_b6351ae69dfd0e3d)
}

var fileDescriptor_b6351ae69dfd0e3d = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x8a, 0x13, 0x41,
	0x10, 0x86, 0xb7, 0x27, 0xd1, 0xb8, 0xb5, 0xb8, 0xbb, 0x36, 0x18, 0x27, 0x51, 0x87, 0x6c, 0x60,
	0x31, 0x22, 0x4c, 0x48, 0x3c, 0x79, 0x10, 0x44, 0x0f, 0xe2, 0x45, 0x71, 0x82, 0x41, 0xbc, 0x84,
	0x4e, 0x52, 0xc4, 0x26, 0x93, 0xee, 0xb1, 0xbb, 0x33, 0x6c, 0xae, 0x3e, 0x81, 0xe0, 0xc5, 0x07,
	0xf0, 0x61, 0x3c, 0x89, 0xe0, 0x0b, 0x48, 0xf4, 0xec, 0x33, 0x48, 0x66, 0xd2, 0xb3, 0x99, 0x59,
	0x35, 0xb9, 0x4d, 0x57, 0x7d, 0xf5, 0x77, 0xd7, 0x5f, 0x53, 0x70, 0xaa, 0xdf, 0x32, 0x85, 0xe3,
	0x36, 0x8b, 0x78, 0x3b, 0xee, 0xb4, 0x85, 0x1c, 0xe3, 0x40, 0x8f, 0x98, 0x18, 0x68, 0x54, 0x31,
	0x1f, 0xa1, 0x1f, 0x29, 0x69, 0x24, 0xdd, 0x5f, 0xc5, 0x04, 0xaa, 0x7e, 0xa7, 0x7e, 0x6b, 0x22,
	0xe5, 0x24, 0xc4, 0xa4, 0x82, 0x09, 0x21, 0x0d, 0x33, 0x5c, 0x0a, 0x9d, 0x82, 0xf5, 0x93, 0xbc,
	0x5e, 0x3c, 0x0f, 0x05, 0x2a, 0x36, 0xe4, 0x21, 0x37, 0x8b, 0x14, 0x69, 0x7e, 0x75, 0xe0, 0xf6,
	0x53, 0x34, 0xcf, 0xe5, 0x18, 0xfb, 0x1b, 0x69, 0x8e, 0x3a, 0xc0, 0x77, 0x73, 0xd4, 0x86, 0xd6,
	0xe0, 0x8a, 0xd4, 0x03, 0x3e, 0x63, 0x13, 0x74, 0x49, 0x83, 0xb4, 0xf6, 0x83, 0x8a, 0xd4, 0xcf,
	0x56, 0x47, 0x7a, 0x0a, 0x87, 0x53, 0x54, 0x02, 0xc3, 0x41, 0x8c, 0x4a, 0x73, 0x29, 0x5c, 0x27,
	0x01, 0xae, 0xa6, 0xd1, 0x7e, 0x1a, 0xa4, 0x77, 0xe0, 0x68, 0x3a, 0x1f, 0x62, 0x88, 0x26, 0xe3,
	0x4a, 0x09, 0x77, 0xb8, 0x0e, 0x5b, 0xf0, 0x1e, 0x5c, 0x5b, 0x45, 0x22, 0x25, 0xcf, 0x16, 0x19,
	0x5a, 0x4e, 0xd0, 0xe3, 0x2c, 0x61, 0xe1, 0x1e, 0x54, 0xd4, 0x5c, 0x18, 0x3e, 0x43, 0xf7, 0x52,
	0x83, 0xb4, 0x0e, 0xba, 0x0f, 0xfc, 0xcc, 0x17, 0xff, 0xbf, 0x2d, 0xf9, 0x4f, 0xa4, 0x30, 0x8c,
	0x0b, 0x54, 0x41, 0x2a, 0x10, 0x58, 0xa5, 0xfa, 0x23, 0x38, 0x2e, 0x26, 0x29, 0x85, 0xb2, 0x60,
	0x33, 0xdb, 0x7c, 0xf2, 0x4d, 0x5d, 0xa8, 0xe4, 0x5b, 0xb6, 0xc7, 0xe6, 0x6f, 0x07, 0xbc, 0x7f,
	0xdd, 0xae, 0x23, 0x29, 0x34, 0xd2, 0x17, 0x50, 0xb5, 0xb6, 0xe5, 0x09, 0x97, 0x34, 0x4a, 0xad,
	0x83, 0xae, 0xbb, 0xd1, 0xc8, 0xa6, 0xc6, 0x22, 0xb8, 0xbe, 0x36, 0x36, 0x5f, 0x46, 0x5f, 0xc2,
	0x8d, 0xcc, 0xe0, 0x82, 0xa2, 0xb3, 0x45, 0xb1, 0x6a, 0x47, 0x50, 0x90, 0x7c, 0x05, 0xb5, 0x8d,
	0x51, 0x14, 0x44, 0x4b, 0x5b, 0x44, 0xdd, 0xf3, 0x61, 0x5d, 0x7c, 0xe9, 0xda, 0xea, 0x0b, 0xa2,
	0xe5, 0x6d, 0x2f, 0x5d, 0x17, 0x16, 0x24, 0xbb, 0x9f, 0x09, 0x1c, 0xad, 0xdc, 0xee, 0x8d, 0x98,
	0xe8, 0xa5, 0x7b, 0x42, 0x3f, 0x10, 0xa8, 0xfe, 0x7d, 0x08, 0xb4, 0xb5, 0xeb, 0x5f, 0x52, 0xbf,
	0xbb, 0x03, 0x99, 0x4e, 0xb4, 0x79, 0xf2, 0xfe, 0xfb, 0xaf, 0x8f, 0xce, 0x4d, 0x5a, 0xb3, 0x6b,
	0xab, 0xdb, 0x85, 0xf6, 0x1e, 0x3f, 0xfc, 0xb2, 0xf4, 0xc8, 0xb7, 0xa5, 0x47, 0x7e, 0x2c, 0x3d,
	0xf2, 0xe9, 0xa7, 0xb7, 0x07, 0x0d, 0x2e, 0x7d, 0x6d, 0xd8, 0x68, 0xaa, 0xe4, 0x59, 0xba, 0x8d,
	0x3e, 0x8b, 0xb8, 0xbd, 0xd4, 0x8f, 0x3b, 0x6f, 0xce, 0x17, 0xfd, 0xf5, 0xde, 0xf0, 0x72, 0x82,
	0xdc, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x3e, 0x0e, 0x7c, 0x25, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeScanServiceClient is the client API for NodeScanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type NodeScanServiceClient interface {
	GetNodeVulnerabilities(ctx context.Context, in *GetNodeVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetNodeVulnerabilitiesResponse, error)
}

type nodeScanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeScanServiceClient(cc grpc.ClientConnInterface) NodeScanServiceClient {
	return &nodeScanServiceClient{cc}
}

func (c *nodeScanServiceClient) GetNodeVulnerabilities(ctx context.Context, in *GetNodeVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetNodeVulnerabilitiesResponse, error) {
	out := new(GetNodeVulnerabilitiesResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.NodeScanService/GetNodeVulnerabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeScanServiceServer is the server API for NodeScanService service.
type NodeScanServiceServer interface {
	GetNodeVulnerabilities(context.Context, *GetNodeVulnerabilitiesRequest) (*GetNodeVulnerabilitiesResponse, error)
}

// UnimplementedNodeScanServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeScanServiceServer struct {
}

func (*UnimplementedNodeScanServiceServer) GetNodeVulnerabilities(ctx context.Context, req *GetNodeVulnerabilitiesRequest) (*GetNodeVulnerabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeVulnerabilities not implemented")
}

func RegisterNodeScanServiceServer(s *grpc.Server, srv NodeScanServiceServer) {
	s.RegisterService(&_NodeScanService_serviceDesc, srv)
}

func _NodeScanService_GetNodeVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeVulnerabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeScanServiceServer).GetNodeVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.NodeScanService/GetNodeVulnerabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeScanServiceServer).GetNodeVulnerabilities(ctx, req.(*GetNodeVulnerabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeScanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scannerV1.NodeScanService",
	HandlerType: (*NodeScanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeVulnerabilities",
			Handler:    _NodeScanService_GetNodeVulnerabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/api/v1/node_scan_service.proto",
}

func (m *GetNodeVulnerabilitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeVulnerabilitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeVulnerabilitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Runtime != nil {
		{
			size, err := m.Runtime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNodeScanService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.KubeproxyVersion) > 0 {
		i -= len(m.KubeproxyVersion)
		copy(dAtA[i:], m.KubeproxyVersion)
		i = encodeVarintNodeScanService(dAtA, i, uint64(len(m.KubeproxyVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.KubeletVersion) > 0 {
		i -= len(m.KubeletVersion)
		copy(dAtA[i:], m.KubeletVersion)
		i = encodeVarintNodeScanService(dAtA, i, uint64(len(m.KubeletVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KernelVersion) > 0 {
		i -= len(m.KernelVersion)
		copy(dAtA[i:], m.KernelVersion)
		i = encodeVarintNodeScanService(dAtA, i, uint64(len(m.KernelVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OsImage) > 0 {
		i -= len(m.OsImage)
		copy(dAtA[i:], m.OsImage)
		i = encodeVarintNodeScanService(dAtA, i, uint64(len(m.OsImage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintNodeScanService(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNodeScanService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNodeVulnerabilitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeVulnerabilitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeVulnerabilitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RuntimeVulnerabilities) > 0 {
		for iNdEx := len(m.RuntimeVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RuntimeVulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodeScanService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.KubeproxyVulnerabilities) > 0 {
		for iNdEx := len(m.KubeproxyVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KubeproxyVulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodeScanService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.KubeletVulnerabilities) > 0 {
		for iNdEx := len(m.KubeletVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KubeletVulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodeScanService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.KernelVulnerabilities) > 0 {
		for iNdEx := len(m.KernelVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KernelVulnerabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodeScanService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNodeScanService(dAtA []byte, offset int, v uint64) int {
	offset -= sovNodeScanService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetNodeVulnerabilitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OsImage)
	if l > 0 {
		n += 1 + l + sovNodeScanService(uint64(l))
	}
	l = len(m.KernelVersion)
	if l > 0 {
		n += 1 + l + sovNodeScanService(uint64(l))
	}
	l = len(m.KubeletVersion)
	if l > 0 {
		n += 1 + l + sovNodeScanService(uint64(l))
	}
	l = len(m.KubeproxyVersion)
	if l > 0 {
		n += 1 + l + sovNodeScanService(uint64(l))
	}
	if m.Runtime != nil {
		l = m.Runtime.Size()
		n += 1 + l + sovNodeScanService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNodeScanService(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovNodeScanService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNodeVulnerabilitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KernelVulnerabilities) > 0 {
		for _, e := range m.KernelVulnerabilities {
			l = e.Size()
			n += 1 + l + sovNodeScanService(uint64(l))
		}
	}
	if len(m.KubeletVulnerabilities) > 0 {
		for _, e := range m.KubeletVulnerabilities {
			l = e.Size()
			n += 1 + l + sovNodeScanService(uint64(l))
		}
	}
	if len(m.KubeproxyVulnerabilities) > 0 {
		for _, e := range m.KubeproxyVulnerabilities {
			l = e.Size()
			n += 1 + l + sovNodeScanService(uint64(l))
		}
	}
	if len(m.RuntimeVulnerabilities) > 0 {
		for _, e := range m.RuntimeVulnerabilities {
			l = e.Size()
			n += 1 + l + sovNodeScanService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNodeScanService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNodeScanService(x uint64) (n int) {
	return sovNodeScanService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetNodeVulnerabilitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeScanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeVulnerabilitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeVulnerabilitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeScanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeScanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeletVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeScanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeletVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeproxyVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeScanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeproxyVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Runtime == nil {
				m.Runtime = &GetNodeVulnerabilitiesRequest_ContainerRuntime{}
			}
			if err := m.Runtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeScanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeVulnerabilitiesRequest_ContainerRuntime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeScanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRuntime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRuntime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeScanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeScanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeScanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeVulnerabilitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeScanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeVulnerabilitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeVulnerabilitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelVulnerabilities = append(m.KernelVulnerabilities, &Vulnerability{})
			if err := m.KernelVulnerabilities[len(m.KernelVulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeletVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeletVulnerabilities = append(m.KubeletVulnerabilities, &Vulnerability{})
			if err := m.KubeletVulnerabilities[len(m.KubeletVulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeproxyVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeproxyVulnerabilities = append(m.KubeproxyVulnerabilities, &Vulnerability{})
			if err := m.KubeproxyVulnerabilities[len(m.KubeproxyVulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeVulnerabilities = append(m.RuntimeVulnerabilities, &Vulnerability{})
			if err := m.RuntimeVulnerabilities[len(m.RuntimeVulnerabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeScanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeScanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodeScanService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodeScanService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeScanService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNodeScanService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNodeScanService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNodeScanService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNodeScanService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodeScanService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNodeScanService = fmt.Errorf("proto: unexpected end of group")
)
