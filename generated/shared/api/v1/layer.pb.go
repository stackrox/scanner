// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shared/api/v1/layer.proto

package scannerV1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TODO: need RPM, DPKG, APK?
type FeatureType int32

const (
	FeatureType_FEATURE_UNKNOWN           FeatureType = 0
	FeatureType_FEATURE_RPM               FeatureType = 1
	FeatureType_FEATURE_DPKG              FeatureType = 2
	FeatureType_FEATURE_APK               FeatureType = 3
	FeatureType_FEATURE_JAVA              FeatureType = 4
	FeatureType_FEATURE_PYTHON            FeatureType = 5
	FeatureType_FEATURE_NPM               FeatureType = 6
	FeatureType_FEATURE_GEM               FeatureType = 7
	FeatureType_FEATURE_DOTNETCORERUNTIME FeatureType = 8
)

var FeatureType_name = map[int32]string{
	0: "FEATURE_UNKNOWN",
	1: "FEATURE_RPM",
	2: "FEATURE_DPKG",
	3: "FEATURE_APK",
	4: "FEATURE_JAVA",
	5: "FEATURE_PYTHON",
	6: "FEATURE_NPM",
	7: "FEATURE_GEM",
	8: "FEATURE_DOTNETCORERUNTIME",
}

var FeatureType_value = map[string]int32{
	"FEATURE_UNKNOWN":           0,
	"FEATURE_RPM":               1,
	"FEATURE_DPKG":              2,
	"FEATURE_APK":               3,
	"FEATURE_JAVA":              4,
	"FEATURE_PYTHON":            5,
	"FEATURE_NPM":               6,
	"FEATURE_GEM":               7,
	"FEATURE_DOTNETCORERUNTIME": 8,
}

func (x FeatureType) String() string {
	return proto.EnumName(FeatureType_name, int32(x))
}

func (FeatureType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ebc184e3928a240, []int{0}
}

type Layer struct {
	Digest               string          `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Namespace            *Namespace      `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Features             []*LayerFeature `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	Cpes                 []string        `protobuf:"bytes,4,rep,name=cpes,proto3" json:"cpes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Layer) Reset()         { *m = Layer{} }
func (m *Layer) String() string { return proto.CompactTextString(m) }
func (*Layer) ProtoMessage()    {}
func (*Layer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ebc184e3928a240, []int{0}
}
func (m *Layer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Layer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Layer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Layer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Layer.Merge(m, src)
}
func (m *Layer) XXX_Size() int {
	return m.Size()
}
func (m *Layer) XXX_DiscardUnknown() {
	xxx_messageInfo_Layer.DiscardUnknown(m)
}

var xxx_messageInfo_Layer proto.InternalMessageInfo

func (m *Layer) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *Layer) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Layer) GetFeatures() []*LayerFeature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *Layer) GetCpes() []string {
	if m != nil {
		return m.Cpes
	}
	return nil
}

func (m *Layer) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Layer) Clone() *Layer {
	if m == nil {
		return nil
	}
	cloned := new(Layer)
	*cloned = *m

	cloned.Namespace = m.Namespace.Clone()
	if m.Features != nil {
		cloned.Features = make([]*LayerFeature, len(m.Features))
		for idx, v := range m.Features {
			cloned.Features[idx] = v.Clone()
		}
	}
	if m.Cpes != nil {
		cloned.Cpes = make([]string, len(m.Cpes))
		copy(cloned.Cpes, m.Cpes)
	}
	return cloned
}

type Namespace struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Distroless           bool     `protobuf:"varint,2,opt,name=distroless,proto3" json:"distroless,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Namespace) Reset()         { *m = Namespace{} }
func (m *Namespace) String() string { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()    {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ebc184e3928a240, []int{1}
}
func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Namespace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(m, src)
}
func (m *Namespace) XXX_Size() int {
	return m.Size()
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

func (m *Namespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Namespace) GetDistroless() bool {
	if m != nil {
		return m.Distroless
	}
	return false
}

func (m *Namespace) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Namespace) Clone() *Namespace {
	if m == nil {
		return nil
	}
	cloned := new(Namespace)
	*cloned = *m

	return cloned
}

type LayerFeature struct {
	Type                 FeatureType   `protobuf:"varint,1,opt,name=type,proto3,enum=scannerV1.FeatureType" json:"type,omitempty"`
	Name                 string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version              string        `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Arch                 string        `protobuf:"bytes,4,opt,name=arch,proto3" json:"arch,omitempty"`
	Module               string        `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`
	Location             string        `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	RemovedComponents    []string      `protobuf:"bytes,7,rep,name=removed_components,json=removedComponents,proto3" json:"removed_components,omitempty"`
	Executables          []*Executable `protobuf:"bytes,8,rep,name=executables,proto3" json:"executables,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LayerFeature) Reset()         { *m = LayerFeature{} }
func (m *LayerFeature) String() string { return proto.CompactTextString(m) }
func (*LayerFeature) ProtoMessage()    {}
func (*LayerFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ebc184e3928a240, []int{2}
}
func (m *LayerFeature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LayerFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LayerFeature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LayerFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LayerFeature.Merge(m, src)
}
func (m *LayerFeature) XXX_Size() int {
	return m.Size()
}
func (m *LayerFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_LayerFeature.DiscardUnknown(m)
}

var xxx_messageInfo_LayerFeature proto.InternalMessageInfo

func (m *LayerFeature) GetType() FeatureType {
	if m != nil {
		return m.Type
	}
	return FeatureType_FEATURE_UNKNOWN
}

func (m *LayerFeature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LayerFeature) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LayerFeature) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *LayerFeature) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *LayerFeature) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *LayerFeature) GetRemovedComponents() []string {
	if m != nil {
		return m.RemovedComponents
	}
	return nil
}

func (m *LayerFeature) GetExecutables() []*Executable {
	if m != nil {
		return m.Executables
	}
	return nil
}

func (m *LayerFeature) MessageClone() proto.Message {
	return m.Clone()
}
func (m *LayerFeature) Clone() *LayerFeature {
	if m == nil {
		return nil
	}
	cloned := new(LayerFeature)
	*cloned = *m

	if m.RemovedComponents != nil {
		cloned.RemovedComponents = make([]string, len(m.RemovedComponents))
		copy(cloned.RemovedComponents, m.RemovedComponents)
	}
	if m.Executables != nil {
		cloned.Executables = make([]*Executable, len(m.Executables))
		for idx, v := range m.Executables {
			cloned.Executables[idx] = v.Clone()
		}
	}
	return cloned
}

func init() {
	proto.RegisterEnum("scannerV1.FeatureType", FeatureType_name, FeatureType_value)
	proto.RegisterType((*Layer)(nil), "scannerV1.Layer")
	proto.RegisterType((*Namespace)(nil), "scannerV1.Namespace")
	proto.RegisterType((*LayerFeature)(nil), "scannerV1.LayerFeature")
}

func init() { proto.RegisterFile("shared/api/v1/layer.proto", fileDescriptor_3ebc184e3928a240) }

var fileDescriptor_3ebc184e3928a240 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xeb, 0xfc, 0xcf, 0xa4, 0x6a, 0xcd, 0x02, 0xc5, 0xad, 0x44, 0x14, 0x72, 0x8a, 0x2a,
	0xe1, 0x28, 0xe9, 0x81, 0x13, 0x42, 0xa1, 0xb8, 0x05, 0x42, 0x9c, 0x68, 0xe5, 0x14, 0xc1, 0xa5,
	0xda, 0x38, 0x03, 0xb5, 0x70, 0xbc, 0xd6, 0xae, 0x63, 0x35, 0x6f, 0xd2, 0x03, 0xaf, 0xc2, 0x9d,
	0x23, 0x8f, 0x80, 0xc2, 0x8b, 0x20, 0xdb, 0xb1, 0xbb, 0xbd, 0xed, 0x7c, 0xdf, 0x6f, 0xf6, 0x9b,
	0x1d, 0xd9, 0x70, 0x2c, 0x6f, 0x98, 0xc0, 0x65, 0x9f, 0x85, 0x5e, 0x3f, 0x1e, 0xf4, 0x7d, 0xb6,
	0x41, 0x61, 0x86, 0x82, 0x47, 0x9c, 0x34, 0xa5, 0xcb, 0x82, 0x00, 0xc5, 0xd5, 0xe0, 0xe4, 0xc5,
	0x43, 0x2a, 0x5e, 0xfb, 0x01, 0x0a, 0xb6, 0xf0, 0x7c, 0x2f, 0xda, 0x64, 0x74, 0xf7, 0xa7, 0x06,
	0xd5, 0x4f, 0x49, 0x37, 0x39, 0x82, 0xda, 0xd2, 0xfb, 0x8e, 0x32, 0x32, 0xb4, 0x8e, 0xd6, 0x6b,
	0xd2, 0x5d, 0x45, 0x86, 0xd0, 0x0c, 0xd8, 0x0a, 0x65, 0xc8, 0x5c, 0x34, 0x4a, 0x1d, 0xad, 0xd7,
	0x1a, 0x3e, 0x31, 0x8b, 0x0c, 0xd3, 0xce, 0x3d, 0x7a, 0x8f, 0x91, 0x33, 0x68, 0x7c, 0x43, 0x16,
	0xad, 0x05, 0x4a, 0xa3, 0xdc, 0x29, 0xf7, 0x5a, 0xc3, 0x67, 0x4a, 0x4b, 0x9a, 0x77, 0x91, 0xf9,
	0xb4, 0x00, 0x09, 0x81, 0x8a, 0x1b, 0xa2, 0x34, 0x2a, 0x9d, 0x72, 0xaf, 0x49, 0xd3, 0x73, 0xf7,
	0x0d, 0x34, 0x8b, 0x80, 0x04, 0x48, 0x22, 0x76, 0xf3, 0xa5, 0x67, 0xd2, 0x06, 0x58, 0x7a, 0x32,
	0x12, 0xdc, 0x47, 0x29, 0xd3, 0xf1, 0x1a, 0x54, 0x51, 0xba, 0x77, 0x25, 0xd8, 0x57, 0xf3, 0xc8,
	0x29, 0x54, 0xa2, 0x4d, 0x98, 0x5d, 0x72, 0x30, 0x3c, 0x52, 0xc6, 0xda, 0x11, 0xce, 0x26, 0x44,
	0x9a, 0x32, 0x45, 0x60, 0x49, 0x09, 0x34, 0xa0, 0x1e, 0xa3, 0x90, 0x1e, 0x0f, 0x8c, 0x72, 0x2a,
	0xe7, 0x65, 0x42, 0x33, 0xe1, 0xde, 0x18, 0x95, 0x8c, 0x4e, 0xce, 0xc9, 0x52, 0x57, 0x7c, 0xb9,
	0xf6, 0xd1, 0xa8, 0x66, 0x4b, 0xcd, 0x2a, 0x72, 0x02, 0x0d, 0x9f, 0xbb, 0x2c, 0x4a, 0xae, 0xa9,
	0xa5, 0x4e, 0x51, 0x93, 0x97, 0x40, 0x04, 0xae, 0x78, 0x8c, 0xcb, 0x6b, 0x97, 0xaf, 0x42, 0x1e,
	0x60, 0x10, 0x49, 0xa3, 0x9e, 0x6e, 0xe5, 0xd1, 0xce, 0x39, 0x2f, 0x0c, 0xf2, 0x0a, 0x5a, 0x78,
	0x8b, 0xee, 0x3a, 0x62, 0x0b, 0x1f, 0xa5, 0xd1, 0x48, 0xd7, 0xfd, 0x54, 0x79, 0x97, 0x55, 0xb8,
	0x54, 0x25, 0x4f, 0x7f, 0x69, 0xd0, 0x52, 0xde, 0x4c, 0x1e, 0xc3, 0xe1, 0x85, 0x35, 0x72, 0xe6,
	0xd4, 0xba, 0x9e, 0xdb, 0x63, 0x7b, 0xfa, 0xd9, 0xd6, 0xf7, 0xc8, 0x21, 0xb4, 0x72, 0x91, 0xce,
	0x26, 0xba, 0x46, 0x74, 0xd8, 0xcf, 0x85, 0x77, 0xb3, 0xf1, 0xa5, 0x5e, 0x52, 0x91, 0xd1, 0x6c,
	0xac, 0x97, 0x55, 0xe4, 0xe3, 0xe8, 0x6a, 0xa4, 0x57, 0x08, 0x81, 0x83, 0x5c, 0x99, 0x7d, 0x71,
	0xde, 0x4f, 0x6d, 0xbd, 0xaa, 0xb6, 0xd9, 0xb3, 0x89, 0x5e, 0x53, 0x85, 0x4b, 0x6b, 0xa2, 0xd7,
	0xc9, 0x73, 0x38, 0x2e, 0xa2, 0xa6, 0x8e, 0x6d, 0x39, 0xe7, 0x53, 0x6a, 0xd1, 0xb9, 0xed, 0x7c,
	0x98, 0x58, 0x7a, 0xe3, 0xed, 0xeb, 0xdf, 0xdb, 0xb6, 0xf6, 0x67, 0xdb, 0xd6, 0xfe, 0x6e, 0xdb,
	0xda, 0xdd, 0xbf, 0xf6, 0x1e, 0x74, 0x3c, 0x6e, 0xca, 0x88, 0xb9, 0x3f, 0x04, 0xbf, 0xcd, 0xbe,
	0x6f, 0x93, 0x85, 0x5e, 0xbe, 0x0a, 0x33, 0x1e, 0x7c, 0xbd, 0xff, 0x39, 0x16, 0xb5, 0x14, 0x38,
	0xfb, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xea, 0xf9, 0x95, 0x4b, 0x03, 0x00, 0x00,
}

func (m *Layer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Layer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Layer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cpes) > 0 {
		for iNdEx := len(m.Cpes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Cpes[iNdEx])
			copy(dAtA[i:], m.Cpes[iNdEx])
			i = encodeVarintLayer(dAtA, i, uint64(len(m.Cpes[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Features[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Namespace != nil {
		{
			size, err := m.Namespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Namespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Namespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Namespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Distroless {
		i--
		if m.Distroless {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LayerFeature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LayerFeature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LayerFeature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Executables) > 0 {
		for iNdEx := len(m.Executables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.RemovedComponents) > 0 {
		for iNdEx := len(m.RemovedComponents) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RemovedComponents[iNdEx])
			copy(dAtA[i:], m.RemovedComponents[iNdEx])
			i = encodeVarintLayer(dAtA, i, uint64(len(m.RemovedComponents[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Arch) > 0 {
		i -= len(m.Arch)
		copy(dAtA[i:], m.Arch)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Arch)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintLayer(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLayer(dAtA []byte, offset int, v uint64) int {
	offset -= sovLayer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Layer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	if m.Namespace != nil {
		l = m.Namespace.Size()
		n += 1 + l + sovLayer(uint64(l))
	}
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovLayer(uint64(l))
		}
	}
	if len(m.Cpes) > 0 {
		for _, s := range m.Cpes {
			l = len(s)
			n += 1 + l + sovLayer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Namespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	if m.Distroless {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LayerFeature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLayer(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	if len(m.RemovedComponents) > 0 {
		for _, s := range m.RemovedComponents {
			l = len(s)
			n += 1 + l + sovLayer(uint64(l))
		}
	}
	if len(m.Executables) > 0 {
		for _, e := range m.Executables {
			l = e.Size()
			n += 1 + l + sovLayer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLayer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLayer(x uint64) (n int) {
	return sovLayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Layer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Layer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Layer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Namespace == nil {
				m.Namespace = &Namespace{}
			}
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &LayerFeature{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpes = append(m.Cpes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Namespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Namespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Namespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distroless", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Distroless = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LayerFeature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LayerFeature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LayerFeature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= FeatureType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedComponents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedComponents = append(m.RemovedComponents, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executables = append(m.Executables, &Executable{})
			if err := m.Executables[len(m.Executables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLayer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLayer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLayer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLayer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLayer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLayer = fmt.Errorf("proto: unexpected end of group")
)
