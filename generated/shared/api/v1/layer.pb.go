// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shared/api/v1/layer.proto

package scannerV1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Note int32

const (
	Note_OS_CVES_UNAVAILABLE             Note = 0
	Note_OS_CVES_STALE                   Note = 1
	Note_LANGUAGE_CVES_UNAVAILABLE       Note = 2
	Note_CERTIFIED_RHEL_SCAN_UNAVAILABLE Note = 3
)

var Note_name = map[int32]string{
	0: "OS_CVES_UNAVAILABLE",
	1: "OS_CVES_STALE",
	2: "LANGUAGE_CVES_UNAVAILABLE",
	3: "CERTIFIED_RHEL_SCAN_UNAVAILABLE",
}

var Note_value = map[string]int32{
	"OS_CVES_UNAVAILABLE":             0,
	"OS_CVES_STALE":                   1,
	"LANGUAGE_CVES_UNAVAILABLE":       2,
	"CERTIFIED_RHEL_SCAN_UNAVAILABLE": 3,
}

func (x Note) String() string {
	return proto.EnumName(Note_name, int32(x))
}

func (Note) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ebc184e3928a240, []int{0}
}

type SourceType int32

const (
	SourceType_UNSET_SOURCE_TYPE SourceType = 0
	SourceType_JAVA              SourceType = 1
	SourceType_PYTHON            SourceType = 2
	SourceType_NPM               SourceType = 3
	SourceType_GEM               SourceType = 4
	SourceType_DOTNETCORERUNTIME SourceType = 5
)

var SourceType_name = map[int32]string{
	0: "UNSET_SOURCE_TYPE",
	1: "JAVA",
	2: "PYTHON",
	3: "NPM",
	4: "GEM",
	5: "DOTNETCORERUNTIME",
}

var SourceType_value = map[string]int32{
	"UNSET_SOURCE_TYPE": 0,
	"JAVA":              1,
	"PYTHON":            2,
	"NPM":               3,
	"GEM":               4,
	"DOTNETCORERUNTIME": 5,
}

func (x SourceType) String() string {
	return proto.EnumName(SourceType_name, int32(x))
}

func (SourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ebc184e3928a240, []int{1}
}

type Layers struct {
	Layers               []*Layer `protobuf:"bytes,1,rep,name=layers,proto3" json:"layers,omitempty"`
	Notes                []Note   `protobuf:"varint,2,rep,packed,name=notes,proto3,enum=scannerV1.Note" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Layers) Reset()         { *m = Layers{} }
func (m *Layers) String() string { return proto.CompactTextString(m) }
func (*Layers) ProtoMessage()    {}
func (*Layers) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ebc184e3928a240, []int{0}
}
func (m *Layers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Layers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Layers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Layers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Layers.Merge(m, src)
}
func (m *Layers) XXX_Size() int {
	return m.Size()
}
func (m *Layers) XXX_DiscardUnknown() {
	xxx_messageInfo_Layers.DiscardUnknown(m)
}

var xxx_messageInfo_Layers proto.InternalMessageInfo

func (m *Layers) GetLayers() []*Layer {
	if m != nil {
		return m.Layers
	}
	return nil
}

func (m *Layers) GetNotes() []Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *Layers) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Layers) Clone() *Layers {
	if m == nil {
		return nil
	}
	cloned := new(Layers)
	*cloned = *m

	if m.Layers != nil {
		cloned.Layers = make([]*Layer, len(m.Layers))
		for idx, v := range m.Layers {
			cloned.Layers[idx] = v.Clone()
		}
	}
	if m.Notes != nil {
		cloned.Notes = make([]Note, len(m.Notes))
		copy(cloned.Notes, m.Notes)
	}
	return cloned
}

type Layer struct {
	Digest               string       `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Namespace            *Namespace   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Components           []*Component `protobuf:"bytes,3,rep,name=components,proto3" json:"components,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Layer) Reset()         { *m = Layer{} }
func (m *Layer) String() string { return proto.CompactTextString(m) }
func (*Layer) ProtoMessage()    {}
func (*Layer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ebc184e3928a240, []int{1}
}
func (m *Layer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Layer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Layer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Layer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Layer.Merge(m, src)
}
func (m *Layer) XXX_Size() int {
	return m.Size()
}
func (m *Layer) XXX_DiscardUnknown() {
	xxx_messageInfo_Layer.DiscardUnknown(m)
}

var xxx_messageInfo_Layer proto.InternalMessageInfo

func (m *Layer) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *Layer) GetNamespace() *Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Layer) GetComponents() []*Component {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *Layer) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Layer) Clone() *Layer {
	if m == nil {
		return nil
	}
	cloned := new(Layer)
	*cloned = *m

	cloned.Namespace = m.Namespace.Clone()
	if m.Components != nil {
		cloned.Components = make([]*Component, len(m.Components))
		for idx, v := range m.Components {
			cloned.Components[idx] = v.Clone()
		}
	}
	return cloned
}

type Namespace struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Distroless           bool     `protobuf:"varint,2,opt,name=distroless,proto3" json:"distroless,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Namespace) Reset()         { *m = Namespace{} }
func (m *Namespace) String() string { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()    {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ebc184e3928a240, []int{2}
}
func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Namespace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(m, src)
}
func (m *Namespace) XXX_Size() int {
	return m.Size()
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

func (m *Namespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Namespace) GetDistroless() bool {
	if m != nil {
		return m.Distroless
	}
	return false
}

func (m *Namespace) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Namespace) Clone() *Namespace {
	if m == nil {
		return nil
	}
	cloned := new(Namespace)
	*cloned = *m

	return cloned
}

type Component struct {
	Type    SourceType `protobuf:"varint,1,opt,name=type,proto3,enum=scannerV1.SourceType" json:"type,omitempty"`
	Name    string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string     `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Arch    string     `protobuf:"bytes,4,opt,name=arch,proto3" json:"arch,omitempty"`
	Module  string     `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are valid to be assigned to IsLanguageLevel:
	//	*Component_LanguageData
	IsLanguageLevel      isComponent_IsLanguageLevel `protobuf_oneof:"is_language_level"`
	Executables          []*Executable               `protobuf:"bytes,7,rep,name=executables,proto3" json:"executables,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Component) Reset()         { *m = Component{} }
func (m *Component) String() string { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()    {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ebc184e3928a240, []int{3}
}
func (m *Component) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Component.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(m, src)
}
func (m *Component) XXX_Size() int {
	return m.Size()
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

type isComponent_IsLanguageLevel interface {
	isComponent_IsLanguageLevel()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isComponent_IsLanguageLevel
}

type Component_LanguageData struct {
	LanguageData *LanguageLevelData `protobuf:"bytes,6,opt,name=language_data,json=languageData,proto3,oneof" json:"language_data,omitempty"`
}

func (*Component_LanguageData) isComponent_IsLanguageLevel() {}
func (m *Component_LanguageData) Clone() isComponent_IsLanguageLevel {
	if m == nil {
		return nil
	}
	cloned := new(Component_LanguageData)
	*cloned = *m

	cloned.LanguageData = m.LanguageData.Clone()
	return cloned
}

func (m *Component) GetIsLanguageLevel() isComponent_IsLanguageLevel {
	if m != nil {
		return m.IsLanguageLevel
	}
	return nil
}

func (m *Component) GetType() SourceType {
	if m != nil {
		return m.Type
	}
	return SourceType_UNSET_SOURCE_TYPE
}

func (m *Component) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Component) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Component) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *Component) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *Component) GetLanguageData() *LanguageLevelData {
	if x, ok := m.GetIsLanguageLevel().(*Component_LanguageData); ok {
		return x.LanguageData
	}
	return nil
}

func (m *Component) GetExecutables() []*Executable {
	if m != nil {
		return m.Executables
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Component) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Component_LanguageData)(nil),
	}
}

func (m *Component) MessageClone() proto.Message {
	return m.Clone()
}
func (m *Component) Clone() *Component {
	if m == nil {
		return nil
	}
	cloned := new(Component)
	*cloned = *m

	if m.IsLanguageLevel != nil {
		cloned.IsLanguageLevel = m.IsLanguageLevel.Clone()
	}
	if m.Executables != nil {
		cloned.Executables = make([]*Executable, len(m.Executables))
		for idx, v := range m.Executables {
			cloned.Executables[idx] = v.Clone()
		}
	}
	return cloned
}

type LanguageLevelData struct {
	Location             string   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	RemovedComponents    []byte   `protobuf:"bytes,3,opt,name=removed_components,json=removedComponents,proto3" json:"removed_components,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LanguageLevelData) Reset()         { *m = LanguageLevelData{} }
func (m *LanguageLevelData) String() string { return proto.CompactTextString(m) }
func (*LanguageLevelData) ProtoMessage()    {}
func (*LanguageLevelData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ebc184e3928a240, []int{4}
}
func (m *LanguageLevelData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LanguageLevelData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LanguageLevelData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LanguageLevelData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LanguageLevelData.Merge(m, src)
}
func (m *LanguageLevelData) XXX_Size() int {
	return m.Size()
}
func (m *LanguageLevelData) XXX_DiscardUnknown() {
	xxx_messageInfo_LanguageLevelData.DiscardUnknown(m)
}

var xxx_messageInfo_LanguageLevelData proto.InternalMessageInfo

func (m *LanguageLevelData) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *LanguageLevelData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LanguageLevelData) GetRemovedComponents() []byte {
	if m != nil {
		return m.RemovedComponents
	}
	return nil
}

func (m *LanguageLevelData) MessageClone() proto.Message {
	return m.Clone()
}
func (m *LanguageLevelData) Clone() *LanguageLevelData {
	if m == nil {
		return nil
	}
	cloned := new(LanguageLevelData)
	*cloned = *m

	if m.Data != nil {
		cloned.Data = make([]byte, len(m.Data))
		copy(cloned.Data, m.Data)
	}
	if m.RemovedComponents != nil {
		cloned.RemovedComponents = make([]byte, len(m.RemovedComponents))
		copy(cloned.RemovedComponents, m.RemovedComponents)
	}
	return cloned
}

func init() {
	proto.RegisterEnum("scannerV1.Note", Note_name, Note_value)
	proto.RegisterEnum("scannerV1.SourceType", SourceType_name, SourceType_value)
	proto.RegisterType((*Layers)(nil), "scannerV1.Layers")
	proto.RegisterType((*Layer)(nil), "scannerV1.Layer")
	proto.RegisterType((*Namespace)(nil), "scannerV1.Namespace")
	proto.RegisterType((*Component)(nil), "scannerV1.Component")
	proto.RegisterType((*LanguageLevelData)(nil), "scannerV1.LanguageLevelData")
}

func init() { proto.RegisterFile("shared/api/v1/layer.proto", fileDescriptor_3ebc184e3928a240) }

var fileDescriptor_3ebc184e3928a240 = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xdd, 0x4e, 0xdb, 0x4a,
	0x10, 0xc7, 0x71, 0xbe, 0x20, 0xc3, 0xc7, 0x71, 0x96, 0xc3, 0x39, 0x06, 0x9d, 0x93, 0xa6, 0xa9,
	0x2a, 0xa5, 0x48, 0x0d, 0x22, 0xad, 0xd4, 0xab, 0xaa, 0x32, 0x61, 0x0b, 0xa9, 0x8c, 0x83, 0xd6,
	0x4e, 0x24, 0x7a, 0x63, 0x6d, 0x9c, 0x15, 0x58, 0x75, 0xbc, 0x96, 0xd7, 0xb1, 0xc8, 0x23, 0xf4,
	0x0d, 0x7a, 0xdf, 0x97, 0xe9, 0x65, 0x1f, 0xa1, 0xa2, 0x2f, 0x52, 0xad, 0x9d, 0x18, 0x47, 0xdc,
	0xed, 0xf8, 0xff, 0x9b, 0xff, 0xcc, 0xce, 0x78, 0xe1, 0x50, 0xdc, 0xd1, 0x88, 0x4d, 0x4f, 0x68,
	0xe8, 0x9d, 0x24, 0xa7, 0x27, 0x3e, 0x5d, 0xb0, 0xa8, 0x1b, 0x46, 0x3c, 0xe6, 0xa8, 0x2e, 0x5c,
	0x1a, 0x04, 0x2c, 0x1a, 0x9f, 0x1e, 0x3d, 0x5f, 0xa7, 0x92, 0xb9, 0x1f, 0xb0, 0x88, 0x4e, 0x3c,
	0xdf, 0x8b, 0x17, 0x19, 0xdd, 0xbe, 0x81, 0x9a, 0x21, 0x93, 0x05, 0xea, 0x40, 0x2d, 0xb5, 0x11,
	0x9a, 0xd2, 0x2a, 0x77, 0xb6, 0x7b, 0x6a, 0x37, 0x37, 0xea, 0xa6, 0x08, 0x59, 0xea, 0xe8, 0x25,
	0x54, 0x03, 0x1e, 0x33, 0xa1, 0x95, 0x5a, 0xe5, 0xce, 0x5e, 0xef, 0xaf, 0x02, 0x68, 0xf2, 0x98,
	0x91, 0x4c, 0x6d, 0x7f, 0x55, 0xa0, 0x9a, 0x26, 0xa2, 0x7f, 0xa0, 0x36, 0xf5, 0x6e, 0x99, 0x88,
	0x35, 0xa5, 0xa5, 0x74, 0xea, 0x64, 0x19, 0xa1, 0x1e, 0xd4, 0x03, 0x3a, 0x63, 0x22, 0xa4, 0x2e,
	0xd3, 0x4a, 0x2d, 0xa5, 0xb3, 0xdd, 0xfb, 0xbb, 0x68, 0xb6, 0xd2, 0xc8, 0x23, 0x86, 0xde, 0x02,
	0xb8, 0x7c, 0x16, 0xf2, 0x80, 0x05, 0xb1, 0xd0, 0xca, 0x69, 0xab, 0xc5, 0xa4, 0xfe, 0x4a, 0x24,
	0x05, 0xae, 0xfd, 0x01, 0xea, 0xb9, 0x1b, 0x42, 0x50, 0x91, 0x7e, 0xcb, 0x66, 0xd2, 0x33, 0x6a,
	0x02, 0x4c, 0x3d, 0x11, 0x47, 0xdc, 0x67, 0x42, 0xa4, 0xbd, 0x6c, 0x91, 0xc2, 0x97, 0xf6, 0xf7,
	0x12, 0xd4, 0x73, 0x6b, 0xf4, 0x0a, 0x2a, 0xf1, 0x22, 0xcc, 0x1c, 0xf6, 0x7a, 0x07, 0x85, 0xf2,
	0x16, 0x9f, 0x47, 0x2e, 0xb3, 0x17, 0x21, 0x23, 0x29, 0x92, 0x17, 0x2b, 0x15, 0x8a, 0x69, 0xb0,
	0x99, 0xb0, 0x48, 0x78, 0x3c, 0xd0, 0xca, 0xe9, 0xe7, 0x55, 0x28, 0x69, 0x1a, 0xb9, 0x77, 0x5a,
	0x25, 0xa3, 0xe5, 0x59, 0x4e, 0x6f, 0xc6, 0xa7, 0x73, 0x9f, 0x69, 0xd5, 0x6c, 0x7a, 0x59, 0x84,
	0xfa, 0xb0, 0xeb, 0xd3, 0xe0, 0x76, 0x4e, 0x6f, 0x99, 0x33, 0xa5, 0x31, 0xd5, 0x6a, 0xe9, 0x04,
	0xff, 0x5b, 0xdb, 0x5b, 0xa6, 0x1b, 0x2c, 0x61, 0xfe, 0x39, 0x8d, 0xe9, 0xe5, 0x06, 0xd9, 0x59,
	0x25, 0xc9, 0x18, 0xbd, 0x83, 0x6d, 0x76, 0xcf, 0xdc, 0x79, 0x4c, 0x27, 0x3e, 0x13, 0xda, 0x66,
	0x3a, 0xcf, 0xe2, 0x85, 0x70, 0xae, 0x92, 0x22, 0x79, 0xb6, 0x0f, 0x0d, 0x4f, 0x38, 0x79, 0x03,
	0xbe, 0xac, 0xd0, 0x8e, 0xa0, 0xf1, 0xa4, 0x24, 0x3a, 0x82, 0x2d, 0x9f, 0xbb, 0x34, 0x96, 0xd7,
	0xcd, 0x46, 0x9e, 0xc7, 0xf2, 0xbe, 0x69, 0xeb, 0x72, 0x3a, 0x3b, 0x24, 0x3d, 0xa3, 0xd7, 0x80,
	0x22, 0x36, 0xe3, 0x09, 0x9b, 0x3a, 0x6b, 0x9b, 0x96, 0x44, 0x63, 0xa9, 0xe4, 0xab, 0x10, 0xc7,
	0x09, 0x54, 0xe4, 0x5f, 0x87, 0xfe, 0x85, 0xfd, 0xa1, 0xe5, 0xf4, 0xc7, 0xd8, 0x72, 0x46, 0xa6,
	0x3e, 0xd6, 0x07, 0x86, 0x7e, 0x66, 0x60, 0x75, 0x03, 0x35, 0x60, 0x77, 0x25, 0x58, 0xb6, 0x6e,
	0x60, 0x55, 0x41, 0xff, 0xc3, 0xa1, 0xa1, 0x9b, 0x17, 0x23, 0xfd, 0x02, 0x3f, 0xcd, 0x28, 0xa1,
	0x17, 0xf0, 0xac, 0x8f, 0x89, 0x3d, 0xf8, 0x38, 0xc0, 0xe7, 0x0e, 0xb9, 0xc4, 0x86, 0x63, 0xf5,
	0x75, 0x73, 0x0d, 0x2a, 0x1f, 0x4f, 0x00, 0x1e, 0x97, 0x8d, 0x0e, 0xa0, 0x31, 0x32, 0x2d, 0x6c,
	0x3b, 0xd6, 0x70, 0x44, 0xfa, 0xd8, 0xb1, 0x6f, 0xae, 0x65, 0xed, 0x2d, 0xa8, 0x7c, 0xd2, 0xc7,
	0xba, 0xaa, 0x20, 0x80, 0xda, 0xf5, 0x8d, 0x7d, 0x39, 0x34, 0xd5, 0x12, 0xda, 0x84, 0xb2, 0x79,
	0x7d, 0xa5, 0x96, 0xe5, 0xe1, 0x02, 0x5f, 0xa9, 0x15, 0x99, 0x7e, 0x3e, 0xb4, 0x4d, 0x6c, 0xf7,
	0x87, 0x04, 0x93, 0x91, 0x69, 0x0f, 0xae, 0xb0, 0x5a, 0x3d, 0x7b, 0xff, 0xe3, 0xa1, 0xa9, 0xfc,
	0x7c, 0x68, 0x2a, 0xbf, 0x1e, 0x9a, 0xca, 0xb7, 0xdf, 0xcd, 0x0d, 0x68, 0x79, 0xbc, 0x2b, 0x62,
	0xea, 0x7e, 0x89, 0xf8, 0x7d, 0xf6, 0x84, 0xbb, 0x34, 0xf4, 0x56, 0xfb, 0xea, 0x26, 0xa7, 0x9f,
	0x1f, 0xdf, 0xff, 0xa4, 0x96, 0x02, 0x6f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x2c, 0x0c,
	0x8a, 0x2e, 0x04, 0x00, 0x00,
}

func (m *Layers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Layers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Layers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notes) > 0 {
		dAtA2 := make([]byte, len(m.Notes)*10)
		var j1 int
		for _, num := range m.Notes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintLayer(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Layers) > 0 {
		for iNdEx := len(m.Layers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Layers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Layer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Layer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Layer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Components) > 0 {
		for iNdEx := len(m.Components) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Components[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Namespace != nil {
		{
			size, err := m.Namespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Namespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Namespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Namespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Distroless {
		i--
		if m.Distroless {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Component) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Component) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Component) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Executables) > 0 {
		for iNdEx := len(m.Executables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.IsLanguageLevel != nil {
		{
			size := m.IsLanguageLevel.Size()
			i -= size
			if _, err := m.IsLanguageLevel.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Arch) > 0 {
		i -= len(m.Arch)
		copy(dAtA[i:], m.Arch)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Arch)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintLayer(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Component_LanguageData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Component_LanguageData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LanguageData != nil {
		{
			size, err := m.LanguageData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLayer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *LanguageLevelData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LanguageLevelData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LanguageLevelData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RemovedComponents) > 0 {
		i -= len(m.RemovedComponents)
		copy(dAtA[i:], m.RemovedComponents)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.RemovedComponents)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintLayer(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLayer(dAtA []byte, offset int, v uint64) int {
	offset -= sovLayer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Layers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Layers) > 0 {
		for _, e := range m.Layers {
			l = e.Size()
			n += 1 + l + sovLayer(uint64(l))
		}
	}
	if len(m.Notes) > 0 {
		l = 0
		for _, e := range m.Notes {
			l += sovLayer(uint64(e))
		}
		n += 1 + sovLayer(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Layer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	if m.Namespace != nil {
		l = m.Namespace.Size()
		n += 1 + l + sovLayer(uint64(l))
	}
	if len(m.Components) > 0 {
		for _, e := range m.Components {
			l = e.Size()
			n += 1 + l + sovLayer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Namespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	if m.Distroless {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Component) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLayer(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	if m.IsLanguageLevel != nil {
		n += m.IsLanguageLevel.Size()
	}
	if len(m.Executables) > 0 {
		for _, e := range m.Executables {
			l = e.Size()
			n += 1 + l + sovLayer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Component_LanguageData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LanguageData != nil {
		l = m.LanguageData.Size()
		n += 1 + l + sovLayer(uint64(l))
	}
	return n
}
func (m *LanguageLevelData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	l = len(m.RemovedComponents)
	if l > 0 {
		n += 1 + l + sovLayer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLayer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLayer(x uint64) (n int) {
	return sovLayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Layers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Layers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Layers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Layers = append(m.Layers, &Layer{})
			if err := m.Layers[len(m.Layers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v Note
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Note(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Notes = append(m.Notes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLayer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLayer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Notes) == 0 {
					m.Notes = make([]Note, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Note
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLayer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Note(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Notes = append(m.Notes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Layer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Layer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Layer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Namespace == nil {
				m.Namespace = &Namespace{}
			}
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Components = append(m.Components, &Component{})
			if err := m.Components[len(m.Components)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Namespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Namespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Namespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distroless", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Distroless = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Component) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Component: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Component: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SourceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LanguageData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LanguageLevelData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IsLanguageLevel = &Component_LanguageData{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executables = append(m.Executables, &Executable{})
			if err := m.Executables[len(m.Executables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LanguageLevelData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LanguageLevelData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LanguageLevelData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedComponents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLayer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedComponents = append(m.RemovedComponents[:0], dAtA[iNdEx:postIndex]...)
			if m.RemovedComponents == nil {
				m.RemovedComponents = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLayer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLayer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLayer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLayer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLayer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLayer = fmt.Errorf("proto: unexpected end of group")
)
