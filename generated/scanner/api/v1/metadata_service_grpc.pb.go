// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.4
// source: scanner/api/v1/metadata_service.proto

package scannerV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VulnDefsService_GetVulnDefsMetadata_FullMethodName = "/scannerV1.VulnDefsService/GetVulnDefsMetadata"
)

// VulnDefsServiceClient is the client API for VulnDefsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VulnDefsServiceClient interface {
	GetVulnDefsMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VulnDefsMetadata, error)
}

type vulnDefsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVulnDefsServiceClient(cc grpc.ClientConnInterface) VulnDefsServiceClient {
	return &vulnDefsServiceClient{cc}
}

func (c *vulnDefsServiceClient) GetVulnDefsMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VulnDefsMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VulnDefsMetadata)
	err := c.cc.Invoke(ctx, VulnDefsService_GetVulnDefsMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VulnDefsServiceServer is the server API for VulnDefsService service.
// All implementations should embed UnimplementedVulnDefsServiceServer
// for forward compatibility
type VulnDefsServiceServer interface {
	GetVulnDefsMetadata(context.Context, *Empty) (*VulnDefsMetadata, error)
}

// UnimplementedVulnDefsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVulnDefsServiceServer struct {
}

func (UnimplementedVulnDefsServiceServer) GetVulnDefsMetadata(context.Context, *Empty) (*VulnDefsMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVulnDefsMetadata not implemented")
}

// UnsafeVulnDefsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VulnDefsServiceServer will
// result in compilation errors.
type UnsafeVulnDefsServiceServer interface {
	mustEmbedUnimplementedVulnDefsServiceServer()
}

func RegisterVulnDefsServiceServer(s grpc.ServiceRegistrar, srv VulnDefsServiceServer) {
	s.RegisterService(&VulnDefsService_ServiceDesc, srv)
}

func _VulnDefsService_GetVulnDefsMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VulnDefsServiceServer).GetVulnDefsMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VulnDefsService_GetVulnDefsMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VulnDefsServiceServer).GetVulnDefsMetadata(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VulnDefsService_ServiceDesc is the grpc.ServiceDesc for VulnDefsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VulnDefsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scannerV1.VulnDefsService",
	HandlerType: (*VulnDefsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVulnDefsMetadata",
			Handler:    _VulnDefsService_GetVulnDefsMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner/api/v1/metadata_service.proto",
}
