// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.4
// source: scanner/api/v1/note.proto

package scannerV1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Note int32

const (
	Note_OS_CVES_UNAVAILABLE             Note = 0
	Note_OS_CVES_STALE                   Note = 1
	Note_LANGUAGE_CVES_UNAVAILABLE       Note = 2
	Note_CERTIFIED_RHEL_SCAN_UNAVAILABLE Note = 3
)

// Enum value maps for Note.
var (
	Note_name = map[int32]string{
		0: "OS_CVES_UNAVAILABLE",
		1: "OS_CVES_STALE",
		2: "LANGUAGE_CVES_UNAVAILABLE",
		3: "CERTIFIED_RHEL_SCAN_UNAVAILABLE",
	}
	Note_value = map[string]int32{
		"OS_CVES_UNAVAILABLE":             0,
		"OS_CVES_STALE":                   1,
		"LANGUAGE_CVES_UNAVAILABLE":       2,
		"CERTIFIED_RHEL_SCAN_UNAVAILABLE": 3,
	}
)

func (x Note) Enum() *Note {
	p := new(Note)
	*p = x
	return p
}

func (x Note) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Note) Descriptor() protoreflect.EnumDescriptor {
	return file_scanner_api_v1_note_proto_enumTypes[0].Descriptor()
}

func (Note) Type() protoreflect.EnumType {
	return &file_scanner_api_v1_note_proto_enumTypes[0]
}

func (x Note) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Note.Descriptor instead.
func (Note) EnumDescriptor() ([]byte, []int) {
	return file_scanner_api_v1_note_proto_rawDescGZIP(), []int{0}
}

type NodeNote int32

const (
	NodeNote_NODE_UNSUPPORTED                     NodeNote = 0
	NodeNote_NODE_KERNEL_UNSUPPORTED              NodeNote = 1
	NodeNote_NODE_CERTIFIED_RHEL_CVES_UNAVAILABLE NodeNote = 2
)

// Enum value maps for NodeNote.
var (
	NodeNote_name = map[int32]string{
		0: "NODE_UNSUPPORTED",
		1: "NODE_KERNEL_UNSUPPORTED",
		2: "NODE_CERTIFIED_RHEL_CVES_UNAVAILABLE",
	}
	NodeNote_value = map[string]int32{
		"NODE_UNSUPPORTED":                     0,
		"NODE_KERNEL_UNSUPPORTED":              1,
		"NODE_CERTIFIED_RHEL_CVES_UNAVAILABLE": 2,
	}
)

func (x NodeNote) Enum() *NodeNote {
	p := new(NodeNote)
	*p = x
	return p
}

func (x NodeNote) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeNote) Descriptor() protoreflect.EnumDescriptor {
	return file_scanner_api_v1_note_proto_enumTypes[1].Descriptor()
}

func (NodeNote) Type() protoreflect.EnumType {
	return &file_scanner_api_v1_note_proto_enumTypes[1]
}

func (x NodeNote) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeNote.Descriptor instead.
func (NodeNote) EnumDescriptor() ([]byte, []int) {
	return file_scanner_api_v1_note_proto_rawDescGZIP(), []int{1}
}

var File_scanner_api_v1_note_proto protoreflect.FileDescriptor

const file_scanner_api_v1_note_proto_rawDesc = "" +
	"\n" +
	"\x19scanner/api/v1/note.proto\x12\tscannerV1*v\n" +
	"\x04Note\x12\x17\n" +
	"\x13OS_CVES_UNAVAILABLE\x10\x00\x12\x11\n" +
	"\rOS_CVES_STALE\x10\x01\x12\x1d\n" +
	"\x19LANGUAGE_CVES_UNAVAILABLE\x10\x02\x12#\n" +
	"\x1fCERTIFIED_RHEL_SCAN_UNAVAILABLE\x10\x03*g\n" +
	"\bNodeNote\x12\x14\n" +
	"\x10NODE_UNSUPPORTED\x10\x00\x12\x1b\n" +
	"\x17NODE_KERNEL_UNSUPPORTED\x10\x01\x12(\n" +
	"$NODE_CERTIFIED_RHEL_CVES_UNAVAILABLE\x10\x02B-\n" +
	" io.stackrox.proto.api.scanner.v1Z\tscannerV1b\x06proto3"

var (
	file_scanner_api_v1_note_proto_rawDescOnce sync.Once
	file_scanner_api_v1_note_proto_rawDescData []byte
)

func file_scanner_api_v1_note_proto_rawDescGZIP() []byte {
	file_scanner_api_v1_note_proto_rawDescOnce.Do(func() {
		file_scanner_api_v1_note_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_scanner_api_v1_note_proto_rawDesc), len(file_scanner_api_v1_note_proto_rawDesc)))
	})
	return file_scanner_api_v1_note_proto_rawDescData
}

var file_scanner_api_v1_note_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_scanner_api_v1_note_proto_goTypes = []any{
	(Note)(0),     // 0: scannerV1.Note
	(NodeNote)(0), // 1: scannerV1.NodeNote
}
var file_scanner_api_v1_note_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_scanner_api_v1_note_proto_init() }
func file_scanner_api_v1_note_proto_init() {
	if File_scanner_api_v1_note_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_scanner_api_v1_note_proto_rawDesc), len(file_scanner_api_v1_note_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scanner_api_v1_note_proto_goTypes,
		DependencyIndexes: file_scanner_api_v1_note_proto_depIdxs,
		EnumInfos:         file_scanner_api_v1_note_proto_enumTypes,
	}.Build()
	File_scanner_api_v1_note_proto = out.File
	file_scanner_api_v1_note_proto_goTypes = nil
	file_scanner_api_v1_note_proto_depIdxs = nil
}
