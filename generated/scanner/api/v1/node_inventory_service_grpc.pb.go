// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.4
// source: scanner/api/v1/node_inventory_service.proto

package scannerV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NodeInventoryService_GetNodeInventory_FullMethodName = "/scannerV1.NodeInventoryService/GetNodeInventory"
)

// NodeInventoryServiceClient is the client API for NodeInventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NodeInventoryService is used in Secured Clusters to fetch information from Nodes and communicate with other
// Secured Cluster components, like the compliance container in Collector.
type NodeInventoryServiceClient interface {
	GetNodeInventory(ctx context.Context, in *GetNodeInventoryRequest, opts ...grpc.CallOption) (*GetNodeInventoryResponse, error)
}

type nodeInventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeInventoryServiceClient(cc grpc.ClientConnInterface) NodeInventoryServiceClient {
	return &nodeInventoryServiceClient{cc}
}

func (c *nodeInventoryServiceClient) GetNodeInventory(ctx context.Context, in *GetNodeInventoryRequest, opts ...grpc.CallOption) (*GetNodeInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeInventoryResponse)
	err := c.cc.Invoke(ctx, NodeInventoryService_GetNodeInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeInventoryServiceServer is the server API for NodeInventoryService service.
// All implementations should embed UnimplementedNodeInventoryServiceServer
// for forward compatibility
//
// NodeInventoryService is used in Secured Clusters to fetch information from Nodes and communicate with other
// Secured Cluster components, like the compliance container in Collector.
type NodeInventoryServiceServer interface {
	GetNodeInventory(context.Context, *GetNodeInventoryRequest) (*GetNodeInventoryResponse, error)
}

// UnimplementedNodeInventoryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNodeInventoryServiceServer struct {
}

func (UnimplementedNodeInventoryServiceServer) GetNodeInventory(context.Context, *GetNodeInventoryRequest) (*GetNodeInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInventory not implemented")
}

// UnsafeNodeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeInventoryServiceServer will
// result in compilation errors.
type UnsafeNodeInventoryServiceServer interface {
	mustEmbedUnimplementedNodeInventoryServiceServer()
}

func RegisterNodeInventoryServiceServer(s grpc.ServiceRegistrar, srv NodeInventoryServiceServer) {
	s.RegisterService(&NodeInventoryService_ServiceDesc, srv)
}

func _NodeInventoryService_GetNodeInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeInventoryServiceServer).GetNodeInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeInventoryService_GetNodeInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeInventoryServiceServer).GetNodeInventory(ctx, req.(*GetNodeInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeInventoryService_ServiceDesc is the grpc.ServiceDesc for NodeInventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeInventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scannerV1.NodeInventoryService",
	HandlerType: (*NodeInventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInventory",
			Handler:    _NodeInventoryService_GetNodeInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner/api/v1/node_inventory_service.proto",
}
