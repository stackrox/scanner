// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scanner/api/v1/node_inventory_scan_service.proto

package scannerV1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetNodeInventoryScanResponse struct {
	NodeName             string      `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Components           *Components `protobuf:"bytes,2,opt,name=components,proto3" json:"components,omitempty"`
	Notes                []Note      `protobuf:"varint,3,rep,packed,name=notes,proto3,enum=scannerV1.Note" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetNodeInventoryScanResponse) Reset()         { *m = GetNodeInventoryScanResponse{} }
func (m *GetNodeInventoryScanResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeInventoryScanResponse) ProtoMessage()    {}
func (*GetNodeInventoryScanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ed5915dd52ca593, []int{0}
}
func (m *GetNodeInventoryScanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeInventoryScanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeInventoryScanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeInventoryScanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInventoryScanResponse.Merge(m, src)
}
func (m *GetNodeInventoryScanResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeInventoryScanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInventoryScanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInventoryScanResponse proto.InternalMessageInfo

func (m *GetNodeInventoryScanResponse) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *GetNodeInventoryScanResponse) GetComponents() *Components {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *GetNodeInventoryScanResponse) GetNotes() []Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *GetNodeInventoryScanResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNodeInventoryScanResponse) Clone() *GetNodeInventoryScanResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetNodeInventoryScanResponse)
	*cloned = *m

	cloned.Components = m.Components.Clone()
	if m.Notes != nil {
		cloned.Notes = make([]Note, len(m.Notes))
		copy(cloned.Notes, m.Notes)
	}
	return cloned
}

type GetNodeInventoryScanRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeInventoryScanRequest) Reset()         { *m = GetNodeInventoryScanRequest{} }
func (m *GetNodeInventoryScanRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeInventoryScanRequest) ProtoMessage()    {}
func (*GetNodeInventoryScanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ed5915dd52ca593, []int{1}
}
func (m *GetNodeInventoryScanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeInventoryScanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeInventoryScanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeInventoryScanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInventoryScanRequest.Merge(m, src)
}
func (m *GetNodeInventoryScanRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeInventoryScanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInventoryScanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInventoryScanRequest proto.InternalMessageInfo

func (m *GetNodeInventoryScanRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNodeInventoryScanRequest) Clone() *GetNodeInventoryScanRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetNodeInventoryScanRequest)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*GetNodeInventoryScanResponse)(nil), "scannerV1.GetNodeInventoryScanResponse")
	proto.RegisterType((*GetNodeInventoryScanRequest)(nil), "scannerV1.GetNodeInventoryScanRequest")
}

func init() {
	proto.RegisterFile("scanner/api/v1/node_inventory_scan_service.proto", fileDescriptor_6ed5915dd52ca593)
}

var fileDescriptor_6ed5915dd52ca593 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x28, 0x4e, 0x4e, 0xcc,
	0xcb, 0x4b, 0x2d, 0xd2, 0x4f, 0x2c, 0xc8, 0xd4, 0x2f, 0x33, 0xd4, 0xcf, 0xcb, 0x4f, 0x49, 0x8d,
	0xcf, 0xcc, 0x2b, 0x4b, 0xcd, 0x2b, 0xc9, 0x2f, 0xaa, 0x8c, 0x07, 0xc9, 0xc6, 0x17, 0xa7, 0x16,
	0x95, 0x65, 0x26, 0xa7, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0x42, 0x75, 0x84, 0x19,
	0x4a, 0xc9, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0x82, 0xf5, 0x26, 0xe6, 0xe5, 0xe5, 0x97, 0x24,
	0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43, 0x14, 0x4a, 0x49, 0x62, 0x18, 0x5d, 0x02, 0x35, 0x43, 0x4a,
	0x0e, 0x4d, 0x2a, 0x39, 0x3f, 0xb7, 0x20, 0x3f, 0x2f, 0x35, 0xaf, 0x04, 0x22, 0xaf, 0x34, 0x93,
	0x91, 0x4b, 0xc6, 0x3d, 0xb5, 0xc4, 0x2f, 0x3f, 0x25, 0xd5, 0x13, 0xe6, 0x96, 0xe0, 0xe4, 0xc4,
	0xbc, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x69, 0x2e, 0x4e, 0xb0, 0x4b, 0xf3,
	0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x38, 0x40, 0x02, 0x7e, 0x89, 0xb9,
	0xa9, 0x42, 0xa6, 0x5c, 0x5c, 0x70, 0x03, 0x8b, 0x25, 0x98, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0x44,
	0xf5, 0xe0, 0xce, 0xd6, 0x73, 0x86, 0x4b, 0x06, 0x21, 0x29, 0x14, 0x52, 0xe5, 0x62, 0x05, 0x39,
	0xb1, 0x58, 0x82, 0x59, 0x81, 0x59, 0x83, 0xcf, 0x88, 0x1f, 0x49, 0x87, 0x5f, 0x7e, 0x49, 0x6a,
	0x10, 0x44, 0x56, 0x49, 0x96, 0x4b, 0x1a, 0xbb, 0xd3, 0x0a, 0x4b, 0x53, 0x8b, 0x4b, 0x8c, 0x66,
	0x31, 0x72, 0x49, 0x60, 0x48, 0x06, 0x43, 0x42, 0x50, 0xa8, 0x8e, 0x4b, 0x00, 0x5d, 0xaf, 0x90,
	0x1a, 0x92, 0x3d, 0x78, 0x0c, 0x96, 0x52, 0x27, 0xa8, 0x0e, 0x12, 0x36, 0x4a, 0x92, 0x4d, 0x97,
	0x9f, 0x4c, 0x66, 0x12, 0x16, 0x12, 0x84, 0xc5, 0x27, 0x48, 0x9f, 0x3e, 0x88, 0x70, 0xb2, 0x3d,
	0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63,
	0xe0, 0x52, 0xc8, 0xcc, 0xd7, 0x2b, 0x2e, 0x49, 0x4c, 0xce, 0x2e, 0xca, 0xaf, 0x80, 0x04, 0xbe,
	0x5e, 0x62, 0x41, 0x26, 0xcc, 0x2a, 0xbd, 0x32, 0xc3, 0x28, 0x44, 0x7c, 0x47, 0x30, 0x24, 0xb1,
	0x81, 0x95, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x31, 0x8f, 0xc6, 0x37, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeInventoryScanServiceClient is the client API for NodeInventoryScanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type NodeInventoryScanServiceClient interface {
	GetNodeInventory(ctx context.Context, in *GetNodeInventoryScanRequest, opts ...grpc.CallOption) (*GetNodeInventoryScanResponse, error)
}

type nodeInventoryScanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeInventoryScanServiceClient(cc grpc.ClientConnInterface) NodeInventoryScanServiceClient {
	return &nodeInventoryScanServiceClient{cc}
}

func (c *nodeInventoryScanServiceClient) GetNodeInventory(ctx context.Context, in *GetNodeInventoryScanRequest, opts ...grpc.CallOption) (*GetNodeInventoryScanResponse, error) {
	out := new(GetNodeInventoryScanResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.NodeInventoryScanService/GetNodeInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeInventoryScanServiceServer is the server API for NodeInventoryScanService service.
type NodeInventoryScanServiceServer interface {
	GetNodeInventory(context.Context, *GetNodeInventoryScanRequest) (*GetNodeInventoryScanResponse, error)
}

// UnimplementedNodeInventoryScanServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeInventoryScanServiceServer struct {
}

func (*UnimplementedNodeInventoryScanServiceServer) GetNodeInventory(ctx context.Context, req *GetNodeInventoryScanRequest) (*GetNodeInventoryScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInventory not implemented")
}

func RegisterNodeInventoryScanServiceServer(s *grpc.Server, srv NodeInventoryScanServiceServer) {
	s.RegisterService(&_NodeInventoryScanService_serviceDesc, srv)
}

func _NodeInventoryScanService_GetNodeInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInventoryScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeInventoryScanServiceServer).GetNodeInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.NodeInventoryScanService/GetNodeInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeInventoryScanServiceServer).GetNodeInventory(ctx, req.(*GetNodeInventoryScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeInventoryScanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scannerV1.NodeInventoryScanService",
	HandlerType: (*NodeInventoryScanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInventory",
			Handler:    _NodeInventoryScanService_GetNodeInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner/api/v1/node_inventory_scan_service.proto",
}

func (m *GetNodeInventoryScanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeInventoryScanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeInventoryScanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notes) > 0 {
		dAtA2 := make([]byte, len(m.Notes)*10)
		var j1 int
		for _, num := range m.Notes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintNodeInventoryScanService(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.Components != nil {
		{
			size, err := m.Components.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNodeInventoryScanService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintNodeInventoryScanService(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNodeInventoryScanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeInventoryScanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeInventoryScanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintNodeInventoryScanService(dAtA []byte, offset int, v uint64) int {
	offset -= sovNodeInventoryScanService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetNodeInventoryScanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovNodeInventoryScanService(uint64(l))
	}
	if m.Components != nil {
		l = m.Components.Size()
		n += 1 + l + sovNodeInventoryScanService(uint64(l))
	}
	if len(m.Notes) > 0 {
		l = 0
		for _, e := range m.Notes {
			l += sovNodeInventoryScanService(uint64(e))
		}
		n += 1 + sovNodeInventoryScanService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNodeInventoryScanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNodeInventoryScanService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNodeInventoryScanService(x uint64) (n int) {
	return sovNodeInventoryScanService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetNodeInventoryScanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeInventoryScanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeInventoryScanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeInventoryScanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeInventoryScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeInventoryScanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeInventoryScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeInventoryScanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeInventoryScanService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodeInventoryScanService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Components == nil {
				m.Components = &Components{}
			}
			if err := m.Components.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Note
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNodeInventoryScanService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Note(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Notes = append(m.Notes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNodeInventoryScanService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNodeInventoryScanService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNodeInventoryScanService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Notes) == 0 {
					m.Notes = make([]Note, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Note
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodeInventoryScanService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Note(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Notes = append(m.Notes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNodeInventoryScanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeInventoryScanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeInventoryScanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeInventoryScanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeInventoryScanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeInventoryScanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNodeInventoryScanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeInventoryScanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodeInventoryScanService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodeInventoryScanService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeInventoryScanService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeInventoryScanService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNodeInventoryScanService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNodeInventoryScanService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNodeInventoryScanService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNodeInventoryScanService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodeInventoryScanService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNodeInventoryScanService = fmt.Errorf("proto: unexpected end of group")
)
