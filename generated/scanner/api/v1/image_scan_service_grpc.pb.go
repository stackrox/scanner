// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package scannerV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageScanServiceClient is the client API for ImageScanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageScanServiceClient interface {
	ScanImage(ctx context.Context, in *ScanImageRequest, opts ...grpc.CallOption) (*ScanImageResponse, error)
	GetImageScan(ctx context.Context, in *GetImageScanRequest, opts ...grpc.CallOption) (*GetImageScanResponse, error)
	GetImageComponents(ctx context.Context, in *GetImageComponentsRequest, opts ...grpc.CallOption) (*GetImageComponentsResponse, error)
	GetImageVulnerabilities(ctx context.Context, in *GetImageVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetImageVulnerabilitiesResponse, error)
	GetLanguageLevelComponents(ctx context.Context, in *GetLanguageLevelComponentsRequest, opts ...grpc.CallOption) (*GetLanguageLevelComponentsResponse, error)
}

type imageScanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageScanServiceClient(cc grpc.ClientConnInterface) ImageScanServiceClient {
	return &imageScanServiceClient{cc}
}

func (c *imageScanServiceClient) ScanImage(ctx context.Context, in *ScanImageRequest, opts ...grpc.CallOption) (*ScanImageResponse, error) {
	out := new(ScanImageResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.ImageScanService/ScanImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageScanServiceClient) GetImageScan(ctx context.Context, in *GetImageScanRequest, opts ...grpc.CallOption) (*GetImageScanResponse, error) {
	out := new(GetImageScanResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.ImageScanService/GetImageScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageScanServiceClient) GetImageComponents(ctx context.Context, in *GetImageComponentsRequest, opts ...grpc.CallOption) (*GetImageComponentsResponse, error) {
	out := new(GetImageComponentsResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.ImageScanService/GetImageComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageScanServiceClient) GetImageVulnerabilities(ctx context.Context, in *GetImageVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetImageVulnerabilitiesResponse, error) {
	out := new(GetImageVulnerabilitiesResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.ImageScanService/GetImageVulnerabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageScanServiceClient) GetLanguageLevelComponents(ctx context.Context, in *GetLanguageLevelComponentsRequest, opts ...grpc.CallOption) (*GetLanguageLevelComponentsResponse, error) {
	out := new(GetLanguageLevelComponentsResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.ImageScanService/GetLanguageLevelComponents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageScanServiceServer is the server API for ImageScanService service.
// All implementations should embed UnimplementedImageScanServiceServer
// for forward compatibility
type ImageScanServiceServer interface {
	ScanImage(context.Context, *ScanImageRequest) (*ScanImageResponse, error)
	GetImageScan(context.Context, *GetImageScanRequest) (*GetImageScanResponse, error)
	GetImageComponents(context.Context, *GetImageComponentsRequest) (*GetImageComponentsResponse, error)
	GetImageVulnerabilities(context.Context, *GetImageVulnerabilitiesRequest) (*GetImageVulnerabilitiesResponse, error)
	GetLanguageLevelComponents(context.Context, *GetLanguageLevelComponentsRequest) (*GetLanguageLevelComponentsResponse, error)
}

// UnimplementedImageScanServiceServer should be embedded to have forward compatible implementations.
type UnimplementedImageScanServiceServer struct {
}

func (UnimplementedImageScanServiceServer) ScanImage(context.Context, *ScanImageRequest) (*ScanImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanImage not implemented")
}
func (UnimplementedImageScanServiceServer) GetImageScan(context.Context, *GetImageScanRequest) (*GetImageScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageScan not implemented")
}
func (UnimplementedImageScanServiceServer) GetImageComponents(context.Context, *GetImageComponentsRequest) (*GetImageComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageComponents not implemented")
}
func (UnimplementedImageScanServiceServer) GetImageVulnerabilities(context.Context, *GetImageVulnerabilitiesRequest) (*GetImageVulnerabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageVulnerabilities not implemented")
}
func (UnimplementedImageScanServiceServer) GetLanguageLevelComponents(context.Context, *GetLanguageLevelComponentsRequest) (*GetLanguageLevelComponentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageLevelComponents not implemented")
}

// UnsafeImageScanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageScanServiceServer will
// result in compilation errors.
type UnsafeImageScanServiceServer interface {
	mustEmbedUnimplementedImageScanServiceServer()
}

func RegisterImageScanServiceServer(s grpc.ServiceRegistrar, srv ImageScanServiceServer) {
	s.RegisterService(&ImageScanService_ServiceDesc, srv)
}

func _ImageScanService_ScanImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageScanServiceServer).ScanImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.ImageScanService/ScanImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageScanServiceServer).ScanImage(ctx, req.(*ScanImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageScanService_GetImageScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageScanServiceServer).GetImageScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.ImageScanService/GetImageScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageScanServiceServer).GetImageScan(ctx, req.(*GetImageScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageScanService_GetImageComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageScanServiceServer).GetImageComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.ImageScanService/GetImageComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageScanServiceServer).GetImageComponents(ctx, req.(*GetImageComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageScanService_GetImageVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageVulnerabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageScanServiceServer).GetImageVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.ImageScanService/GetImageVulnerabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageScanServiceServer).GetImageVulnerabilities(ctx, req.(*GetImageVulnerabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageScanService_GetLanguageLevelComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageLevelComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageScanServiceServer).GetLanguageLevelComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.ImageScanService/GetLanguageLevelComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageScanServiceServer).GetLanguageLevelComponents(ctx, req.(*GetLanguageLevelComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageScanService_ServiceDesc is the grpc.ServiceDesc for ImageScanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageScanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scannerV1.ImageScanService",
	HandlerType: (*ImageScanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanImage",
			Handler:    _ImageScanService_ScanImage_Handler,
		},
		{
			MethodName: "GetImageScan",
			Handler:    _ImageScanService_GetImageScan_Handler,
		},
		{
			MethodName: "GetImageComponents",
			Handler:    _ImageScanService_GetImageComponents_Handler,
		},
		{
			MethodName: "GetImageVulnerabilities",
			Handler:    _ImageScanService_GetImageVulnerabilities_Handler,
		},
		{
			MethodName: "GetLanguageLevelComponents",
			Handler:    _ImageScanService_GetLanguageLevelComponents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner/api/v1/image_scan_service.proto",
}
