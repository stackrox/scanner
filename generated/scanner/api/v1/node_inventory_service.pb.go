// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scanner/api/v1/node_inventory_service.proto

package scannerV1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetNodeInventoryResponse struct {
	NodeName             string      `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Components           *Components `protobuf:"bytes,2,opt,name=components,proto3" json:"components,omitempty"`
	Notes                []Note      `protobuf:"varint,3,rep,packed,name=notes,proto3,enum=scannerV1.Note" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetNodeInventoryResponse) Reset()         { *m = GetNodeInventoryResponse{} }
func (m *GetNodeInventoryResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeInventoryResponse) ProtoMessage()    {}
func (*GetNodeInventoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a6ae79358c6b21, []int{0}
}
func (m *GetNodeInventoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeInventoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeInventoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeInventoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInventoryResponse.Merge(m, src)
}
func (m *GetNodeInventoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeInventoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInventoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInventoryResponse proto.InternalMessageInfo

func (m *GetNodeInventoryResponse) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *GetNodeInventoryResponse) GetComponents() *Components {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *GetNodeInventoryResponse) GetNotes() []Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *GetNodeInventoryResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNodeInventoryResponse) Clone() *GetNodeInventoryResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetNodeInventoryResponse)
	*cloned = *m

	cloned.Components = m.Components.Clone()
	if m.Notes != nil {
		cloned.Notes = make([]Note, len(m.Notes))
		copy(cloned.Notes, m.Notes)
	}
	return cloned
}

type GetNodeInventoryRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeInventoryRequest) Reset()         { *m = GetNodeInventoryRequest{} }
func (m *GetNodeInventoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeInventoryRequest) ProtoMessage()    {}
func (*GetNodeInventoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a6ae79358c6b21, []int{1}
}
func (m *GetNodeInventoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNodeInventoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNodeInventoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNodeInventoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeInventoryRequest.Merge(m, src)
}
func (m *GetNodeInventoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNodeInventoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeInventoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeInventoryRequest proto.InternalMessageInfo

func (m *GetNodeInventoryRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetNodeInventoryRequest) Clone() *GetNodeInventoryRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetNodeInventoryRequest)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterType((*GetNodeInventoryResponse)(nil), "scannerV1.GetNodeInventoryResponse")
	proto.RegisterType((*GetNodeInventoryRequest)(nil), "scannerV1.GetNodeInventoryRequest")
}

func init() {
	proto.RegisterFile("scanner/api/v1/node_inventory_service.proto", fileDescriptor_51a6ae79358c6b21)
}

var fileDescriptor_51a6ae79358c6b21 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x3b, 0x7f, 0xf9, 0xc5, 0x8e, 0xa0, 0x32, 0x28, 0xa6, 0x51, 0x42, 0x88, 0x08, 0x05,
	0x61, 0x4a, 0x2b, 0x2e, 0xdd, 0xe8, 0x42, 0xdc, 0x74, 0x11, 0x41, 0x44, 0x90, 0x32, 0xa6, 0x97,
	0x32, 0x68, 0xef, 0x8d, 0x99, 0x69, 0xd0, 0x07, 0x11, 0x7c, 0x24, 0x97, 0x3e, 0x82, 0xd4, 0x17,
	0x91, 0x66, 0xda, 0x18, 0x5b, 0x74, 0x7b, 0xcf, 0x39, 0x1f, 0x87, 0x73, 0xf9, 0xa1, 0x49, 0x14,
	0x22, 0x64, 0x6d, 0x95, 0xea, 0x76, 0xde, 0x69, 0x23, 0x0d, 0xa0, 0xaf, 0x31, 0x07, 0xb4, 0x94,
	0x3d, 0xf7, 0x0d, 0x64, 0xb9, 0x4e, 0x40, 0xa6, 0x19, 0x59, 0x12, 0x8d, 0x99, 0xf9, 0xaa, 0xe3,
	0xef, 0x0d, 0x89, 0x86, 0x0f, 0x50, 0xc4, 0x14, 0x22, 0x59, 0x65, 0x35, 0xa1, 0x71, 0x46, 0xbf,
	0xb9, 0x44, 0xb5, 0x33, 0x86, 0x1f, 0x2c, 0x48, 0x09, 0x8d, 0x52, 0x42, 0x40, 0xeb, 0xf4, 0xe8,
	0x85, 0x71, 0xef, 0x1c, 0x6c, 0x8f, 0x06, 0x70, 0x31, 0xaf, 0x11, 0x83, 0x49, 0x09, 0x0d, 0x88,
	0x5d, 0xde, 0x28, 0x0a, 0xa2, 0x1a, 0x81, 0xc7, 0x42, 0xd6, 0x6a, 0xc4, 0xab, 0xd3, 0x43, 0x4f,
	0x8d, 0x40, 0x1c, 0x73, 0x5e, 0xc2, 0x8c, 0xf7, 0x2f, 0x64, 0xad, 0xb5, 0xee, 0xb6, 0x2c, 0x2b,
	0xcb, 0xb3, 0x52, 0x8c, 0x2b, 0x46, 0x71, 0xc0, 0xff, 0x4f, 0xeb, 0x19, 0xaf, 0x1e, 0xd6, 0x5b,
	0xeb, 0xdd, 0x8d, 0x4a, 0xa2, 0x47, 0x16, 0x62, 0xa7, 0x46, 0x4d, 0xbe, 0xb3, 0x5c, 0xeb, 0x71,
	0x0c, 0xc6, 0x76, 0xc7, 0x7c, 0xeb, 0xc7, 0xfd, 0xd2, 0x8d, 0x26, 0x6e, 0xf9, 0xe6, 0x62, 0x44,
	0x44, 0x15, 0xfc, 0x2f, 0x3c, 0x7f, 0xff, 0x4f, 0x8f, 0x9b, 0x22, 0xaa, 0x9d, 0x9e, 0xbc, 0x4d,
	0x02, 0xf6, 0x3e, 0x09, 0xd8, 0xc7, 0x24, 0x60, 0xaf, 0x9f, 0x41, 0x8d, 0x87, 0x9a, 0xa4, 0xb1,
	0x2a, 0xb9, 0xcf, 0xe8, 0xc9, 0xcd, 0x29, 0x55, 0xaa, 0xe7, 0x34, 0x99, 0x77, 0x6e, 0xbe, 0x3f,
	0x78, 0x5d, 0xbb, 0x5b, 0x29, 0x2c, 0x47, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x42, 0x87,
	0x03, 0x04, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NodeInventoryServiceClient is the client API for NodeInventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type NodeInventoryServiceClient interface {
	GetNodeInventory(ctx context.Context, in *GetNodeInventoryRequest, opts ...grpc.CallOption) (*GetNodeInventoryResponse, error)
}

type nodeInventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeInventoryServiceClient(cc grpc.ClientConnInterface) NodeInventoryServiceClient {
	return &nodeInventoryServiceClient{cc}
}

func (c *nodeInventoryServiceClient) GetNodeInventory(ctx context.Context, in *GetNodeInventoryRequest, opts ...grpc.CallOption) (*GetNodeInventoryResponse, error) {
	out := new(GetNodeInventoryResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.NodeInventoryService/GetNodeInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeInventoryServiceServer is the server API for NodeInventoryService service.
type NodeInventoryServiceServer interface {
	GetNodeInventory(context.Context, *GetNodeInventoryRequest) (*GetNodeInventoryResponse, error)
}

// UnimplementedNodeInventoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeInventoryServiceServer struct {
}

func (*UnimplementedNodeInventoryServiceServer) GetNodeInventory(ctx context.Context, req *GetNodeInventoryRequest) (*GetNodeInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInventory not implemented")
}

func RegisterNodeInventoryServiceServer(s *grpc.Server, srv NodeInventoryServiceServer) {
	s.RegisterService(&_NodeInventoryService_serviceDesc, srv)
}

func _NodeInventoryService_GetNodeInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeInventoryServiceServer).GetNodeInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.NodeInventoryService/GetNodeInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeInventoryServiceServer).GetNodeInventory(ctx, req.(*GetNodeInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeInventoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scannerV1.NodeInventoryService",
	HandlerType: (*NodeInventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInventory",
			Handler:    _NodeInventoryService_GetNodeInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner/api/v1/node_inventory_service.proto",
}

func (m *GetNodeInventoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeInventoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeInventoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notes) > 0 {
		dAtA2 := make([]byte, len(m.Notes)*10)
		var j1 int
		for _, num := range m.Notes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintNodeInventoryService(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.Components != nil {
		{
			size, err := m.Components.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNodeInventoryService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintNodeInventoryService(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNodeInventoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNodeInventoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNodeInventoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintNodeInventoryService(dAtA []byte, offset int, v uint64) int {
	offset -= sovNodeInventoryService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetNodeInventoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovNodeInventoryService(uint64(l))
	}
	if m.Components != nil {
		l = m.Components.Size()
		n += 1 + l + sovNodeInventoryService(uint64(l))
	}
	if len(m.Notes) > 0 {
		l = 0
		for _, e := range m.Notes {
			l += sovNodeInventoryService(uint64(e))
		}
		n += 1 + sovNodeInventoryService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNodeInventoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNodeInventoryService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNodeInventoryService(x uint64) (n int) {
	return sovNodeInventoryService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetNodeInventoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeInventoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeInventoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeInventoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeInventoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNodeInventoryService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeInventoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Components", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeInventoryService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeInventoryService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodeInventoryService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Components == nil {
				m.Components = &Components{}
			}
			if err := m.Components.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Note
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNodeInventoryService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Note(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Notes = append(m.Notes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNodeInventoryService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNodeInventoryService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNodeInventoryService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Notes) == 0 {
					m.Notes = make([]Note, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Note
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNodeInventoryService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Note(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Notes = append(m.Notes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNodeInventoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeInventoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNodeInventoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeInventoryService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNodeInventoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNodeInventoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNodeInventoryService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeInventoryService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodeInventoryService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodeInventoryService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeInventoryService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeInventoryService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNodeInventoryService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNodeInventoryService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNodeInventoryService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNodeInventoryService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodeInventoryService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNodeInventoryService = fmt.Errorf("proto: unexpected end of group")
)
