///////////////////////////////////////////////////
// Influenced by ClairCore under Apache 2.0 License
// https://github.com/quay/claircore
///////////////////////////////////////////////////

package pgsql

import (
	"bytes"
	"crypto/md5"
	"database/sql"

	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"
	"github.com/stackrox/rox/pkg/set"
	"github.com/stackrox/rox/pkg/utils"
	"github.com/stackrox/scanner/database"
)

func (pgSQL *pgSQL) InsertRHELv2Vulnerabilities(vulnerabilities []*database.RHELv2Vulnerability) error {
	log.WithField("count", len(vulnerabilities)).Info("Inserting RHELv2 vulnerabilities")

	for i, vulnerability := range vulnerabilities {
		if vulnerability.Package == nil || vulnerability.Package.Name == "" {
			continue
		}
		err := pgSQL.insertRHELv2Vulnerability(vulnerability)
		if err != nil {
			return err
		}
		if (i+1)%printEveryWhenInsertingVulns == 0 {
			log.Infof("Inserted %d/%d vulns", i+1, len(vulnerabilities))
		}
	}

	return nil
}

func (pgSQL *pgSQL) insertRHELv2Vulnerability(vuln *database.RHELv2Vulnerability) error {
	tx, err := pgSQL.Begin()
	if err != nil {
		return errors.Wrap(err, "unable to start transaction")
	}

	descHash := md5.Sum(append([]byte(vuln.Name), []byte(vuln.Description)...))
	_, err = tx.Exec(insertRHELv2VulnDescription, descHash[:], vuln.Name, vuln.Description)
	if err != nil {
		utils.IgnoreError(tx.Rollback)
		return errors.Wrapf(err, "inserting RHELv2 description for %s into the DB", vuln.Name)
	}

	pkg := vuln.Package
	for _, cpe := range vuln.CPEs {
		hash := md5Vuln(vuln, cpe)
		_, err = tx.Exec(insertRHELv2Vuln,
			hash,
			vuln.Name, vuln.Issued, vuln.Updated, vuln.Link,
			vuln.Severity, vuln.CVSSv3, vuln.CVSSv2,
			pkg.Name, pkg.Module, pkg.Arch,
			cpe,
			vuln.FixedInVersion, vuln.ArchOperation,
		)
		if err != nil {
			utils.IgnoreError(tx.Rollback)
			return errors.Wrapf(err, "inserting RHELv2 vulnerability %s into the DB", vuln.Name)
		}
	}

	if err := tx.Commit(); err != nil {
		utils.IgnoreError(tx.Rollback)
		return handleError("insertRHELv2Vulnerability.Commit()", err)
	}

	return nil
}

// md5Vuln creates an md5 hash from the members of the passed-in Vulnerability,
// giving us a stable, context-free identifier for this revision of the
// Vulnerability.
func md5Vuln(v *database.RHELv2Vulnerability, cpe string) []byte {
	var b bytes.Buffer
	b.WriteString(v.Name)
	// Ignore description, as it is stored separately.
	b.WriteString(v.Issued.String())
	b.WriteString(v.Updated.String())
	b.WriteString(v.Link)
	b.WriteString(v.Severity)
	b.WriteString(v.CVSSv3)
	b.WriteString(v.CVSSv2)
	// Use the given CPE.
	b.WriteString(cpe)
	if v.Package != nil {
		b.WriteString(v.Package.Name)
		b.WriteString(v.Package.Module)
		b.WriteString(v.Package.Arch)
	}
	b.WriteString(v.ArchOperation.String())
	b.WriteString(v.FixedInVersion)
	s := md5.Sum(b.Bytes())
	return s[:]
}

func (pgSQL *pgSQL) GetRHELv2Vulnerabilities(records []*database.RHELv2Record) (map[int][]*database.RHELv2Vulnerability, error) {
	vulnMap := make(map[int][]*database.RHELv2Vulnerability)

	// Ensures we only have one copy of each vulnerability per package.
	uniqueVulns := make(map[int]set.StringSet)

	tx, err := pgSQL.Begin()
	if err != nil {
		return nil, err
	}

	for _, record := range records {
		if record.Pkg != nil && record.Pkg.Name != "" {
			matchedVulns, err := pgSQL.getRHELv2Vulns(tx, record)
			if err != nil {
				utils.IgnoreError(tx.Rollback)
				return nil, err
			}

			recordID := record.Pkg.ID

			if _, ok := uniqueVulns[recordID]; !ok {
				uniqueVulns[recordID] = set.NewStringSet()
			}

			addedVulns := uniqueVulns[recordID]

			for _, matched := range matchedVulns {
				if addedVulns.Add(matched.Name) {
					vulnMap[recordID] = append(vulnMap[recordID], matched)
				}
			}
		}
	}

	return vulnMap, nil
}

func (pgSQL *pgSQL) getRHELv2Vulns(tx *sql.Tx, record *database.RHELv2Record) ([]*database.RHELv2Vulnerability, error) {
	rows, err := tx.Query(searchRHELv2Vulnerabilities, record.Pkg.Name, record.Pkg.Module, record.CPE)

	if err != nil {
		return nil, err
	}
	defer utils.IgnoreError(rows.Close)

	var vulns []*database.RHELv2Vulnerability

	for rows.Next() {
		var vuln database.RHELv2Vulnerability
		var pkg database.RHELv2Package
		err := rows.Scan(
			&vuln.ID,
			&vuln.Name,
			&vuln.Description,
			&vuln.Link,
			&vuln.Issued,
			&vuln.Updated,
			&vuln.Severity,
			&vuln.CVSSv3,
			&vuln.CVSSv2,
			&pkg.Name,
			&pkg.Arch,
			&vuln.ArchOperation,
			&vuln.FixedInVersion,
		)
		if err != nil {
			return nil, err
		}

		vuln.Package = &pkg
		vulns = append(vulns, &vuln)
	}

	return vulns, nil
}
