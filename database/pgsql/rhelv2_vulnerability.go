///////////////////////////////////////////////////
// Influenced by ClairCore under Apache 2.0 License
// https://github.com/quay/claircore
///////////////////////////////////////////////////

package pgsql

import (
	"context"
	"database/sql"

	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"
	"github.com/stackrox/rox/pkg/set"
	"github.com/stackrox/rox/pkg/utils"
	"github.com/stackrox/scanner/database"
)

func (pgSQL *pgSQL) InsertRHELv2Vulnerabilities(vulnerabilities []*database.RHELv2Vulnerability) error {
	log.WithField("count", len(vulnerabilities)).Info("Inserting RHELv2 vulnerabilities")

	for i, vulnerability := range vulnerabilities {
		if len(vulnerability.PackageInfos) == 0 {
			continue
		}
		err := pgSQL.insertRHELv2Vulnerability(vulnerability)
		if err != nil {
			return err
		}
		if (i+1)%printEveryWhenInsertingVulns == 0 {
			log.Infof("Inserted %d/%d vulns", i+1, len(vulnerabilities))
		}
	}

	return nil
}

func (pgSQL *pgSQL) insertRHELv2Vulnerability(vuln *database.RHELv2Vulnerability) error {
	tx, err := pgSQL.Begin()
	if err != nil {
		return errors.Wrap(err, "unable to start transaction")
	}

	vulnHash := database.MD5Vuln(vuln)
	_, err = tx.Exec(insertRHELv2Vuln,
		vulnHash,
		vuln.Name, vuln.Description, vuln.Issued, vuln.Updated, vuln.Link,
		vuln.Severity, vuln.CVSSv3, vuln.CVSSv2,
	)
	if err != nil {
		utils.IgnoreError(tx.Rollback)
		return errors.Wrapf(err, "inserting RHELv2 vuln %q into the DB", vuln.Name)
	}

	for _, pkgInfo := range vuln.PackageInfos {
		for _, pkg := range pkgInfo.Packages {
			for _, cpe := range vuln.CPEs {
				pkgHash := database.MD5VulnPackage(vuln.Name, pkg, cpe, pkgInfo)
				_, err := tx.Exec(insertRHELv2VulnPackage,
					pkgHash,
					vuln.Name,
					pkg.Name, pkg.Module, pkg.Arch,
					cpe,
					pkgInfo.FixedInVersion, pkgInfo.ArchOperation,
				)
				if err != nil {
					utils.IgnoreError(tx.Rollback)
					return errors.Wrapf(err, "inserting RHELv2 vulnerability package %q with cpe %q for vuln %q into the DB", pkg.Name, cpe, vuln.Name)
				}
			}
		}
	}

	if err := tx.Commit(); err != nil {
		utils.IgnoreError(tx.Rollback)
		return handleError("insertRHELv2Vulnerability.Commit()", err)
	}

	return nil
}

func (pgSQL *pgSQL) DeleteRHELv2VulnerabilityPackages(hashes [][]byte) error {
	log.WithField("count", len(hashes)).Info("Deleting RHELv2 vulnerability packages")

	tx, err := pgSQL.Begin()
	if err != nil {
		return errors.Wrap(err, "unable to start transaction")
	}

	for _, hash := range hashes {
		if len(hash) == 0 {
			continue
		}

		_, err = tx.Exec(deleteRHELv2VulnPackage, hash)
		if err != nil {
			utils.IgnoreError(tx.Rollback)
			return errors.Wrapf(err, "deleting RHELv2 vulnerability package with hash %q from the DB", string(hash))
		}
	}

	if err := tx.Commit(); err != nil {
		utils.IgnoreError(tx.Rollback)
		return handleError("DeleteRHELv2VulnerabilityPackages.Commit()", err)
	}

	return nil
}

func (pgSQL *pgSQL) GetRHELv2Vulnerabilities(records []*database.RHELv2Record) (map[int][]*database.RHELv2Vulnerability, error) {
	vulnMap := make(map[int][]*database.RHELv2Vulnerability)

	// Ensures we only have one copy of each vulnerability per package.
	uniqueVulns := make(map[int]set.StringSet)

	tx, err := pgSQL.BeginTx(context.Background(), &sql.TxOptions{
		ReadOnly: true,
	})
	if err != nil {
		return nil, errors.Wrap(err, "unable to start transaction")
	}

	for _, record := range records {
		if record.Pkg != nil && record.Pkg.Name != "" {
			matchedVulns, err := pgSQL.getRHELv2Vulns(tx, record)
			if err != nil {
				utils.IgnoreError(tx.Rollback)
				return nil, errors.Wrapf(err, "getting RHELv2 vulns")
			}

			recordID := record.Pkg.ID

			if _, ok := uniqueVulns[recordID]; !ok {
				uniqueVulns[recordID] = set.NewStringSet()
			}

			addedVulns := uniqueVulns[recordID]

			for _, matched := range matchedVulns {
				if addedVulns.Add(matched.Name) {
					vulnMap[recordID] = append(vulnMap[recordID], matched)
				}
			}
		}
	}

	if err := tx.Commit(); err != nil {
		utils.IgnoreError(tx.Rollback)
		return nil, handleError("GetRHELv2Vulnerabilities.Commit()", err)
	}

	return vulnMap, nil
}

func (pgSQL *pgSQL) getRHELv2Vulns(tx *sql.Tx, record *database.RHELv2Record) ([]*database.RHELv2Vulnerability, error) {
	rows, err := tx.Query(searchRHELv2Vulnerabilities, record.Pkg.Name, record.Pkg.Module, record.CPE)

	if err != nil {
		return nil, errors.Wrapf(err, "Searching for package: %s, module: %s, cpe: %s", record.Pkg.Name, record.Pkg.Module, record.CPE)
	}
	defer utils.IgnoreError(rows.Close)

	var vulns []*database.RHELv2Vulnerability

	for rows.Next() {
		var pkg database.RHELv2Package
		pkgInfo := database.RHELv2PackageInfo{
			Packages: []*database.RHELv2Package{&pkg},
		}
		vuln := database.RHELv2Vulnerability{
			PackageInfos: []*database.RHELv2PackageInfo{&pkgInfo},
		}
		err := rows.Scan(
			&vuln.ID,
			&vuln.Name,
			&vuln.Description,
			&vuln.Link,
			&vuln.Issued,
			&vuln.Updated,
			&vuln.Severity,
			&vuln.CVSSv3,
			&vuln.CVSSv2,
			&pkg.Name,
			&pkg.Arch,
			&pkgInfo.FixedInVersion,
			&pkgInfo.ArchOperation,
		)
		if err != nil {
			return nil, errors.Wrapf(err, "Scanning row for package: %s, module: %s, cpe: %s", record.Pkg.Name, record.Pkg.Module, record.CPE)
		}

		vulns = append(vulns, &vuln)
	}

	return vulns, nil
}
