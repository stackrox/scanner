//go:build db_integration
// +build db_integration

package pgsql

import (
	"context"
	"database/sql"
	"testing"

	"github.com/stackrox/scanner/database"
	"github.com/stackrox/scanner/pkg/archop"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestRHELv2Vulnerability(t *testing.T) {
	datastore, err := openDatabaseForTest("InsertRHELv2Vulnerability", false)
	require.NoError(t, err)
	defer datastore.Close()

	v1 := &database.RHELv2Vulnerability{
		Name:        "CVE-2021-1234",
		Description: "my vuln",
		Link:        "https://access.redhat.com/security/cve/CVE-2021-1234",
		Severity:    "Important",
		CVSSv2:      "4.0/AV:N/AC:H/Au:N/C:P/I:P/A:N",
		CPEs: []string{
			"cpe:/o:redhat:enterprise_linux:8",
		},
		Packages: []*database.RHELv2Package{
			{
				Name:            "package",
				Arch:            "x86_64",
				ResolutionState: "Affected",

				FixedInVersion: "0:1.0.8-13.el8",
				ArchOperation:  archop.OpEquals,
			},
		},
	}
	v2 := &database.RHELv2Vulnerability{
		Name:        "CVE-2021-1235",
		Title:       "RHSA-2013:0565: Red Hat Enterprise MRG Grid 2.3 security update (Low)",
		Description: "my vuln2",
		Link:        "https://access.redhat.com/security/cve/CVE-2021-1235",
		Severity:    "Moderate",
		CVSSv3:      "4.6/CVSS:3.0/AV:A/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:L",
		CPEs: []string{
			"cpe:/o:redhat:enterprise_linux:8",
			"cpe:/o:redhat:enterprise_linux:7",
		},
		Packages: []*database.RHELv2Package{
			{
				Name:            "package",
				Arch:            "x86_64",
				ResolutionState: "Affected",

				FixedInVersion: "0:1.0.8-13.el8",
				ArchOperation:  archop.OpEquals,
			},
		},
	}

	err = datastore.InsertRHELv2Vulnerabilities([]*database.RHELv2Vulnerability{v1, v2})
	assert.NoError(t, err)

	// Re-insert vulns to ensure there is no error.
	err = datastore.InsertRHELv2Vulnerabilities([]*database.RHELv2Vulnerability{v1, v2})
	assert.NoError(t, err)

	records := []*database.RHELv2Record{
		{
			Pkg: &database.RHELv2Package{
				Name: "package",
			},
			CPE: "cpe:/o:redhat:enterprise_linux:7",
		},
	}

	// Sanity check all fields are valid for single vuln.
	vulns, err := datastore.GetRHELv2Vulnerabilities(records)
	assert.NoError(t, err)
	assert.Len(t, vulns, 1)
	assert.Len(t, vulns[0], 1)
	vuln := vulns[0][0]
	assert.Equal(t, v2.Name, vuln.Name)
	assert.Equal(t, v2.Title, vuln.Title)
	assert.Equal(t, v2.Description, vuln.Description)
	assert.Equal(t, v2.Link, vuln.Link)
	assert.Equal(t, v2.Severity, vuln.Severity)
	assert.Equal(t, v2.CVSSv3, vuln.CVSSv3)
	assert.Equal(t, v2.CVSSv2, vuln.CVSSv2)
	assert.Equal(t, v2.Packages[0].Name, vuln.Packages[0].Name)
	assert.Equal(t, v2.Packages[0].Arch, vuln.Packages[0].Arch)
	assert.Equal(t, v2.Packages[0].ResolutionState, vuln.Packages[0].ResolutionState)
	assert.Equal(t, v2.Packages[0].FixedInVersion, vuln.Packages[0].FixedInVersion)
	assert.Equal(t, v2.Packages[0].ArchOperation, vuln.Packages[0].ArchOperation)

	records = []*database.RHELv2Record{
		{
			Pkg: &database.RHELv2Package{
				Model: database.Model{ID: 0},
				Name:  "package",
			},
			CPE: "cpe:/o:redhat:enterprise_linux:8",
		},
	}

	// Ensure both vulns are returned.
	vulns, err = datastore.GetRHELv2Vulnerabilities(records)
	assert.NoError(t, err)
	assert.Len(t, vulns, 1)
	vulnNames := make([]string, 0, len(vulns[0]))
	for _, vuln := range vulns[0] {
		vulnNames = append(vulnNames, vuln.Name)
	}
	assert.ElementsMatch(t, vulnNames, []string{v1.Name, v2.Name})

	records = []*database.RHELv2Record{
		{
			Pkg: &database.RHELv2Package{
				Model: database.Model{ID: 0},
				Name:  "package",
			},
			CPE: "cpe:/o:redhat:enterprise_linux:7",
		},
		{
			Pkg: &database.RHELv2Package{
				Model: database.Model{ID: 0},
				Name:  "package",
			},
			CPE: "cpe:/o:redhat:enterprise_linux:8",
		},
	}

	// Ensure only 2 vulns are returned.
	vulns, err = datastore.GetRHELv2Vulnerabilities(records)
	assert.NoError(t, err)
	assert.Len(t, vulns, 1)
	assert.Len(t, vulns[0], 2)

	v3 := &database.RHELv2Vulnerability{
		Name:        "CVE-1236",
		Description: "3",
		CPEs: []string{
			"cpe:/o:redhat:enterprise_linux:8",
			"cpe:/o:redhat:enterprise_linux:6",
		},
		Packages: []*database.RHELv2Package{
			{
				Name:    "package2",
				Version: "2",
				Arch:    "noarch",
			},
		},
	}

	err = datastore.InsertRHELv2Vulnerabilities([]*database.RHELv2Vulnerability{v3})
	assert.NoError(t, err)

	records = []*database.RHELv2Record{
		{
			Pkg: &database.RHELv2Package{
				Model: database.Model{ID: 0},
				Name:  "package",
			},
			CPE: "cpe:/o:redhat:enterprise_linux:8",
		},
		{
			Pkg: &database.RHELv2Package{
				Model: database.Model{ID: 1},
				Name:  "package2",
			},
			CPE: "cpe:/o:redhat:enterprise_linux:6",
		},
	}

	// Ensure 3 vulns are returned for package and 1 for package2.
	vulns, err = datastore.GetRHELv2Vulnerabilities(records)
	assert.NoError(t, err)
	assert.Len(t, vulns, 2)
	assert.Len(t, vulns[0], 2)
	assert.Len(t, vulns[1], 1)
}

func TestRHELv2Vulnerability_MultipleDescriptions(t *testing.T) {
	datastore, err := openDatabaseForTest("TestRHELv2Vulnerability_MultipleDescriptions", false)
	require.NoError(t, err)
	defer datastore.Close()

	v1 := &database.RHELv2Vulnerability{
		Name:        "CVE-2022-1234",
		Description: "Description 1",
		CPEs:        []string{"cpe:/a:redhat:enterprise_linux:8::appstream"},
		Packages: []*database.RHELv2Package{
			{
				Name: "something",
				Arch: "x86_64",
			},
		},
	}
	v2 := &database.RHELv2Vulnerability{
		Name:        "CVE-2022-1234",
		Description: "Description 2",
		CPEs:        []string{"cpe:/a:redhat:enterprise_linux:8::baseos"},
		Packages: []*database.RHELv2Package{
			{
				Name: "something",
				Arch: "x86_64",
			},
		},
	}

	assert.NoError(t, datastore.InsertRHELv2Vulnerabilities([]*database.RHELv2Vulnerability{v1, v2}))

	records := []*database.RHELv2Record{
		{
			Pkg: &database.RHELv2Package{
				Model:   database.Model{ID: 0},
				Name:    "something",
				Version: "1",
			},
			CPE: "cpe:/a:redhat:enterprise_linux:8::appstream",
		},
		{
			Pkg: &database.RHELv2Package{
				Model:   database.Model{ID: 1},
				Name:    "something",
				Version: "1",
			},
			CPE: "cpe:/a:redhat:enterprise_linux:8::baseos",
		},
	}

	vulns, err := datastore.GetRHELv2Vulnerabilities(records)
	assert.NoError(t, err)

	// Ensure we get a different description for the same CVE but different CPEs.
	assert.Len(t, vulns, 2)
	assert.Len(t, vulns[0], 1)
	assert.Equal(t, "Description 1", vulns[0][0].Description)
	assert.Len(t, vulns[1], 1)
	assert.Equal(t, "Description 2", vulns[1][0].Description)
}

func TestRHELv2Vulnerability_CVEWithMultipleSeverities(t *testing.T) {
	datastore, err := openDatabaseForTest("TestRHELv2Vulnerability_CVEWithMultipleSeverities", false)
	require.NoError(t, err)
	defer datastore.Close()

	v1 := &database.RHELv2Vulnerability{
		Name:        "CVE-2022-1650",
		Description: "DOCUMENTATION: A flaw was found in the EventSource NPM Package. The description from the source states the following message: \"Exposure of Sensitive Information to an Unauthorized Actor.\" This flaw allows an attacker to steal the user's credentials and then use the credentials to access the legitimate website.",
		Link:        "https://access.redhat.com/security/cve/CVE-2022-1650",
		Severity:    "Important",
		CVSSv3:      "8.1/CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
		CPEs: []string{
			"cpe:/a:redhat:enterprise_linux:8::appstream",
			"cpe:/o:redhat:enterprise_linux:8::baseos",
		},
		Packages: []*database.RHELv2Package{
			{
				Name: "something",
				Arch: "x86_64",
			},
		},
	}

	v2 := &database.RHELv2Vulnerability{
		Name:        "CVE-2022-1650",
		Description: "DOCUMENTATION: A flaw was found in the EventSource NPM Package. The description from the source states the following message: \"Exposure of Sensitive Information to an Unauthorized Actor.\" This flaw allows an attacker to steal the user's credentials and then use the credentials to access the legitimate website.",
		Link:        "https://access.redhat.com/security/cve/CVE-2022-1650",
		Severity:    "Moderate",
		CVSSv3:      "8.1/CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
		CPEs: []string{
			"cpe:/a:redhat:enterprise_linux:8::appstream",
			"cpe:/o:redhat:enterprise_linux:8::baseos",
		},
		Packages: []*database.RHELv2Package{
			{
				Name: "aspnetcore-runtime-6.0",
				Arch: "x86_64",
			},
		},
	}

	assert.NoError(t, datastore.InsertRHELv2Vulnerabilities([]*database.RHELv2Vulnerability{v1, v2}))

	record := &database.RHELv2Record{
		Pkg: &database.RHELv2Package{
			Name:    "aspnetcore-runtime-6.0",
			Version: "6.0.6-1.el8_6",
			Arch:    "x86_64",
		},
		CPE: "cpe:/o:redhat:enterprise_linux:8::baseos",
	}

	tx, err := datastore.BeginTx(context.Background(), &sql.TxOptions{
		ReadOnly: true,
	})
	require.NoError(t, err)

	// Ensure there is only one matched CVE, and it has the correct severity.
	vulns, err := datastore.getRHELv2Vulns(tx, record)
	if assert.NoError(t, err) {
		_ = tx.Commit()
	} else {
		_ = tx.Rollback()
	}
	assert.Len(t, vulns, 1)
	vuln := vulns[0]
	assert.Equal(t, "Moderate", vuln.Severity)
}

func TestRHELv2VulnerabilityCVERemoval(t *testing.T) {
	datastore, err := openDatabaseForTest("TestRHELv2VulnerabilityCVERemoval", false)
	require.NoError(t, err)
	defer datastore.Close()

	v1 := &database.RHELv2Vulnerability{
		Name:        "CVE-2021-1234",
		Description: "my vuln",
		Link:        "https://access.redhat.com/security/cve/CVE-2021-1234",
		Severity:    "Important",
		CVSSv2:      "4.0/AV:N/AC:H/Au:N/C:P/I:P/A:N",
		CPEs: []string{
			"cpe:/o:redhat:enterprise_linux:8",
		},
		Packages: []*database.RHELv2Package{
			{
				Name: "package",
				Arch: "x86_64",

				FixedInVersion: "0:1.0.8-13.el8",
				ArchOperation:  archop.OpEquals,
			},
		},
	}
	v2 := &database.RHELv2Vulnerability{
		Name:        "CVE-2021-1235",
		Title:       "RHSA-2013:0565: Red Hat Enterprise MRG Grid 2.3 security update (Low)",
		Description: "my vuln2",
		Link:        "https://access.redhat.com/security/cve/CVE-2021-1235",
		Severity:    "Moderate",
		CVSSv3:      "4.6/CVSS:3.0/AV:A/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:L",
		CPEs: []string{
			"cpe:/o:redhat:enterprise_linux:8",
			"cpe:/o:redhat:enterprise_linux:7",
		},
		Packages: []*database.RHELv2Package{
			{
				Name: "package",
				Arch: "x86_64",

				FixedInVersion: "0:1.0.8-13.el8",
				ArchOperation:  archop.OpEquals,
			},
		},
	}

	err = datastore.InsertRHELv2Vulnerabilities([]*database.RHELv2Vulnerability{v1, v2})
	assert.NoError(t, err)

	// Insert RHSA for CPE cpe:/o:redhat:enterprise_linux:7 with a fix and sub CVE for the two above
	// Only the second one should be removed as the CPE will match
	v3 := &database.RHELv2Vulnerability{
		Name:        "RHSA-2013:0565",
		Title:       "RHSA-2013:0565: Red Hat Enterprise MRG Grid 2.3 security update (Low)",
		Description: "my vuln2",
		Link:        "https://access.redhat.com/security/cve/CVE-2021-1235",
		Severity:    "Moderate",
		CVSSv3:      "4.6/CVSS:3.0/AV:A/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:L",
		CPEs: []string{
			"cpe:/o:redhat:enterprise_linux:7",
		},
		Packages: []*database.RHELv2Package{
			{
				Name: "package",
				Arch: "x86_64",

				FixedInVersion: "0:1.0.8-13.el8",
				ArchOperation:  archop.OpEquals,
			},
		},
		SubCVEs: []string{"CVE-2021-1234", "CVE-2021-1235"},
	}

	err = datastore.InsertRHELv2Vulnerabilities([]*database.RHELv2Vulnerability{v3})
	assert.NoError(t, err)

	records := []*database.RHELv2Record{
		{
			Pkg: &database.RHELv2Package{
				Name: "package",
			},
			CPE: "cpe:/o:redhat:enterprise_linux:7",
		},
	}

	// Sanity check all fields are valid for single vuln.
	vulns, err := datastore.GetRHELv2Vulnerabilities(records)
	assert.NoError(t, err)
	assert.Len(t, vulns, 1)
	assert.Len(t, vulns[0], 1)
	vuln := vulns[0][0]
	assert.Equal(t, v3.Name, vuln.Name)

	records = []*database.RHELv2Record{
		{
			Pkg: &database.RHELv2Package{
				Model: database.Model{ID: 0},
				Name:  "package",
			},
			CPE: "cpe:/o:redhat:enterprise_linux:8",
		},
	}

	// Ensure both vulns are returned.
	vulns, err = datastore.GetRHELv2Vulnerabilities(records)
	assert.NoError(t, err)
	assert.Len(t, vulns, 1)
	vulnNames := make([]string, 0, len(vulns[0]))
	for _, vuln := range vulns[0] {
		vulnNames = append(vulnNames, vuln.Name)
	}
	assert.ElementsMatch(t, vulnNames, []string{v1.Name, v2.Name})
}
