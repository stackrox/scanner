syntax = "proto3";

option go_package = "scannerV1";

option java_package = "io.stackrox.proto.api.scanner.v1";

import weak "google/api/annotations.proto";
import "shared/api/v1/component.proto";
import "shared/api/v1/vulnerability.proto";

package scannerV1;

message Image {
    repeated Feature features = 1;
}

message ScanImageRequest {
    string image          = 1;
    RegistryData registry = 2;
    // uncertifiedRHEL tells the Scanner to scan the image
    // in an uncertified manner, if the image is RHEL-based.
    bool uncertifiedRHEL  = 3;
}

message ScanImageResponse {
    ScanStatus status = 1;
    ImageSpec image   = 2;
}

message GetImageScanRequest {
    // Only one of the fields in ImageSpec needs to be set for the request to be properly formed
    // If both are set, then digest is used
    ImageSpec image_spec = 1;
    // uncertifiedRHEL set to `true` tells the Scanner to
    // return uncertified scan results for the given RHEL-based image
    // (if the image is RHEL-based).
    bool uncertifiedRHEL = 2;
}

message GetImageScanResponse {
    ScanStatus    status = 1;
    Image         image  = 2;
    repeated Note notes  = 3;
}

message GetImageComponentsRequest {
    string       image        = 1;
    RegistryData registry     = 2;
}

message GetImageComponentsResponse {
    ScanStatus    status     = 1;
    Components    components = 2;
    repeated Note notes      = 3;
}

message GetLanguageLevelComponentsRequest {
    // Only one of the fields in ImageSpec needs to be set for the request to be properly formed
    // If both are set, then digest is used
    ImageSpec image_spec = 1;
    // uncertifiedRHEL set to `true` tells the Scanner to
    // return uncertified scan results for the given RHEL-based image
    // (if the image is RHEL-based).
    bool uncertifiedRHEL = 2;
}

message GetLanguageLevelComponentsResponse {
    map <string, LanguageLevelComponents> layer_to_components = 1;
}

message ImageSpec {
    string digest = 1;
    string image  = 2;
}

message RegistryData {
    string url      = 1;
    string username = 2;
    string password = 3;
    bool   insecure = 4;
}

enum ScanStatus {
    UNSET     = 0;
    ANALYZING = 1;
    FAILED    = 2;
    SUCCEEDED = 3;
}

message LanguageLevelComponents {
    repeated LanguageLevelComponent components = 1;
}

message LanguageLevelComponent {
    SourceType source_type = 1;
    string     name        = 2;
    string     version     = 3;
    string     location    = 4;

    // TODO: consider adding more specific version information here (like all the stuff we have for Java).
}

enum Note {
    OS_CVES_UNAVAILABLE             = 0;
    OS_CVES_STALE                   = 1;
    LANGUAGE_CVES_UNAVAILABLE       = 2;
    CERTIFIED_RHEL_SCAN_UNAVAILABLE = 3;
}

// ImageScanService APIs can be used to scan images.
service ImageScanService {
    rpc ScanImage(ScanImageRequest) returns (ScanImageResponse) {
        option (google.api.http) = {
            post: "/v1/images/scan"
            body: "*"
        };
    }

    rpc GetImageScan(GetImageScanRequest) returns (GetImageScanResponse) {
        option (google.api.http) = {
            get: "/v1/images/scan"
        };
    }

    rpc GetImageComponents(GetImageComponentsRequest) returns (GetImageComponentsResponse) {}

    rpc GetLanguageLevelComponents(GetLanguageLevelComponentsRequest) returns (GetLanguageLevelComponentsResponse) {
        option (google.api.http) = {
            get: "/v1/images/languagecomponents"
        };
    }
}
