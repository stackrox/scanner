plugins {
    id "com.google.protobuf" version "0.8.8"
    id "groovy"
    id "codenarc"
}

sourceCompatibility = 1.8
version = '1.0'

codenarc.configFile = file("./codenarc-rules.groovy")
codenarc.reportFormat = 'text'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

def grpcVersion = '1.21.0'
def protocVersion = '3.6.1'
def protobufVersion = '3.6.1'
def nettyTcNativeVersion = '2.0.25.Final'

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                outputSubDir = "java"
            }
        }

        // Add each output source directory to the sourceSet based on its basename (e.g., `java`).
        all().each { task ->
            task.outputSourceDirectorySet.srcDirs.each { srcDir ->
                sourceSets[task.sourceSet.name][srcDir.name].srcDirs += srcDir
            }
        }
    }
}

// Assign all Java source dirs to Groovy, as the groovy compiler should take care of them.
sourceSets.each { ss ->
    ss.groovy.srcDirs += ss.java.srcDirs
    ss.java.srcDirs = []
}

dependencies {
    // grpc and protobuf
    compile "com.google.api.grpc:proto-google-common-protos:1.0.0"
    compile "io.grpc:grpc-alts:${grpcVersion}"
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "io.grpc:grpc-auth:${grpcVersion}"
    compile "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    compile "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"


    // Use the latest Groovy version for building this library
    compile 'org.codehaus.groovy:groovy-all:2.5.4'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile group: 'com.jayway.restassured', name: 'rest-assured', version: '2.4.1'
    testCompile( 'com.athaydes:spock-reports:1.4.0' ) {
        transitive = false
    }
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: "${protobufVersion}"
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: "${protobufVersion}"

    compile 'com.google.api.grpc:googleapis-common-protos:0.0.3'

    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.3-groovy-2.5'
    testCompile group: 'com.google.code.gson', name: 'gson', version: '2.7'

}



tasks.withType(Test) {
    def testGroups = new TestGroups(System.getProperty("groups"))

    useJUnit {
        includeCategories testGroups.getIncludedGroups()
        excludeCategories testGroups.getExcludedGroups()
    }

    testLogging {
        showStandardStreams true
        exceptionFormat "full"
    }
}

test {
    testLogging.showStandardStreams = true

    // This ensures that repeated invocations of tests actually run the tests.
    // Otherwise, if the tests pass, Gradle "caches" the result and doesn't actually run the tests,
    // which is not the behaviour we expect of E2Es.
    // https://stackoverflow.com/questions/42175235/force-gradle-to-run-task-even-if-it-is-up-to-date/42185919
    outputs.upToDateWhen { false }
}
